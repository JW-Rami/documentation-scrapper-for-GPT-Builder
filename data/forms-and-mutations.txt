Data Fetching: Forms and Mutations | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using Pages Router
Features available in /pages
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Examples
Server-only form
Form validation
Error handling
Displaying loading state
Redirecting
Setting cookies
Reading cookies
Deleting cookies
Edit this page on GitHub
Scroll to top
Pages Router
...
Data Fetching
Forms and Mutations
Forms and Mutations
Forms enable you to create and update data in web applications. Next.js provides a powerful way to handle form submissions and data mutations using
API Routes
.
Good to know:
We will soon recommend
incrementally adopting
the App Router and using
Server Actions
for handling form submissions and data mutations. Server Actions allow you to define asynchronous server functions that can be called directly from your components, without needing to manually create an API Route.
API Routes
do not specify CORS headers
, meaning they are same-origin only by default.
Since API Routes run on the server, we're able to use sensitive values (like API keys) through
Environment Variables
without exposing them to the client. This is critical for the security of your application.
Examples
Server-only form
With the Pages Router, you need to manually create API endpoints to handle securely mutating data on the server.
pages/api/submit.ts
import
type
{ NextApiRequest
,
NextApiResponse }
from
'next'
export
default
async
function
handler
(
req
:
NextApiRequest
,
res
:
NextApiResponse
) {
const
data
=
req
.body
const
id
=
await
createItem
(data)
res
.status
(
200
)
.json
({ id })
}
Then, call the API Route from the client with an event handler:
pages/index.tsx
import
{ FormEvent }
from
'react'
export
default
function
Page
() {
async
function
onSubmit
(event
:
FormEvent
<
HTMLFormElement
>) {
event
.preventDefault
()
const
formData
=
new
FormData
(
event
.currentTarget)
const
response
=
await
fetch
(
'/api/submit'
,
{
method
:
'POST'
,
body
:
formData
,
})
// Handle response if necessary
const
data
=
await
response
.json
()
// ...
}
return
(
<
form
onSubmit
=
{onSubmit}>
<
input
type
=
"text"
name
=
"name"
/>
<
button
type
=
"submit"
>Submit</
button
>
</
form
>
)
}
Form validation
We recommend using HTML validation like
required
and
type="email"
for basic client-side form validation.
For more advanced server-side validation, you can use a schema validation library like
zod
to validate the form fields before mutating the data:
pages/api/submit.ts
import
type
{ NextApiRequest
,
NextApiResponse }
from
'next'
import
{ z }
from
'zod'
const
schema
=
z
.object
({
// ...
})
export
default
async
function
handler
(
req
:
NextApiRequest
,
res
:
NextApiResponse
) {
const
parsed
=
schema
.parse
(
req
.body)
// ...
}
Error handling
You can use React state to show an error message when a form submission fails:
pages/index.tsx
import
React
,
{ useState
,
FormEvent }
from
'react'
export
default
function
Page
() {
const
[
isLoading
,
setIsLoading
]
=
useState
<
boolean
>(
false
)
const
[
error
,
setError
]
=
useState
<
string
|
null
>(
null
)
async
function
onSubmit
(event
:
FormEvent
<
HTMLFormElement
>) {
event
.preventDefault
()
setIsLoading
(
true
)
setError
(
null
)
// Clear previous errors when a new request starts
try
{
const
formData
=
new
FormData
(
event
.currentTarget)
const
response
=
await
fetch
(
'/api/submit'
,
{
method
:
'POST'
,
body
:
formData
,
})
if
(
!
response
.ok) {
throw
new
Error
(
'Failed to submit the data. Please try again.'
)
}
// Handle response if necessary
const
data
=
await
response
.json
()
// ...
}
catch
(error) {
// Capture the error message to display to the user
setError
(
error
.message)
console
.error
(error)
}
finally
{
setIsLoading
(
false
)
}
}
return
(
<
div
>
{error
&&
<
div
style
=
{{ color
:
'red'
}}>{error}</
div
>}
<
form
onSubmit
=
{onSubmit}>
<
input
type
=
"text"
name
=
"name"
/>
<
button
type
=
"submit"
disabled
=
{isLoading}>
{isLoading
?
'Loading...'
:
'Submit'
}
</
button
>
</
form
>
</
div
>
)
}
Displaying loading state
You can use React state to show a loading state when a form is submitting on the server:
pages/index.tsx
import
React
,
{ useState
,
FormEvent }
from
'react'
export
default
function
Page
() {
const
[
isLoading
,
setIsLoading
]
=
useState
<
boolean
>(
false
)
async
function
onSubmit
(event
:
FormEvent
<
HTMLFormElement
>) {
event
.preventDefault
()
setIsLoading
(
true
)
// Set loading to true when the request starts
try
{
const
formData
=
new
FormData
(
event
.currentTarget)
const
response
=
await
fetch
(
'/api/submit'
,
{
method
:
'POST'
,
body
:
formData
,
})
// Handle response if necessary
const
data
=
await
response
.json
()
// ...
}
catch
(error) {
// Handle error if necessary
console
.error
(error)
}
finally
{
setIsLoading
(
false
)
// Set loading to false when the request completes
}
}
return
(
<
form
onSubmit
=
{onSubmit}>
<
input
type
=
"text"
name
=
"name"
/>
<
button
type
=
"submit"
disabled
=
{isLoading}>
{isLoading
?
'Loading...'
:
'Submit'
}
</
button
>
</
form
>
)
}
Redirecting
If you would like to redirect the user to a different route after a mutation, you can
redirect
to any absolute or relative URL:
pages/api/submit.ts
import
type
{ NextApiRequest
,
NextApiResponse }
from
'next'
export
default
async
function
handler
(
req
:
NextApiRequest
,
res
:
NextApiResponse
) {
const
id
=
await
addPost
()
res
.redirect
(
307
,
`/post/
${
id
}
`
)
}
Setting cookies
You can set cookies inside an API Route using the
setHeader
method on the response:
pages/api/cookie.ts
import
type
{ NextApiRequest
,
NextApiResponse }
from
'next'
export
default
async
function
handler
(
req
:
NextApiRequest
,
res
:
NextApiResponse
) {
res
.setHeader
(
'Set-Cookie'
,
'username=lee; Path=/; HttpOnly'
)
res
.status
(
200
)
.send
(
'Cookie has been set.'
)
}
Reading cookies
You can read cookies inside an API Route using the
cookies
request helper:
pages/api/cookie.ts
import
type
{ NextApiRequest
,
NextApiResponse }
from
'next'
export
default
async
function
handler
(
req
:
NextApiRequest
,
res
:
NextApiResponse
) {
const
auth
=
req
.
cookies
.authorization
// ...
}
Deleting cookies
You can delete cookies inside an API Route using the
setHeader
method on the response:
pages/api/cookie.ts
import
type
{ NextApiRequest
,
NextApiResponse }
from
'next'
export
default
async
function
handler
(
req
:
NextApiRequest
,
res
:
NextApiResponse
) {
res
.setHeader
(
'Set-Cookie'
,
'username=; Path=/; HttpOnly; Max-Age=0'
)
res
.status
(
200
)
.send
(
'Cookie has been deleted.'
)
}
Previous
getStaticPaths
Next
getServerSideProps
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.