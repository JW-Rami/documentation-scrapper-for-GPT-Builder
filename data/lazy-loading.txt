Optimizing: Lazy Loading | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using Pages Router
Features available in /pages
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
next/dynamic
Examples
With named exports
With no SSR
With external libraries
Edit this page on GitHub
Scroll to top
Pages Router
...
Optimizing
Lazy Loading
Lazy Loading
Lazy loading
in Next.js helps improve the initial loading performance of an application by decreasing the amount of JavaScript needed to render a route.
It allows you to defer loading of
Client Components
and imported libraries, and only include them in the client bundle when they're needed. For example, you might want to defer loading a modal until a user clicks to open it.
There are two ways you can implement lazy loading in Next.js:
Using
Dynamic Imports
with
next/dynamic
Using
React.lazy()
with
Suspense
By default, Server Components are automatically
code split
, and you can use
streaming
to progressively send pieces of UI from the server to the client. Lazy loading applies to Client Components.
next/dynamic
next/dynamic
is a composite of
React.lazy()
and
Suspense
. It behaves the same way in the
app
and
pages
directories to allow for incremental migration.
Examples
By using
next/dynamic
, the header component will not be included in the page's initial JavaScript bundle. The page will render the Suspense
fallback
first, followed by the
Header
component when the
Suspense
boundary is resolved.
import
dynamic
from
'next/dynamic'
const
DynamicHeader
=
dynamic
(()
=>
import
(
'../components/header'
)
,
{
loading
:
()
=>
<
p
>Loading...</
p
>
,
})
export
default
function
Home
() {
return
<
DynamicHeader
/>
}
Good to know
: In
import('path/to/component')
, the path must be explicitly written. It can't be a template string nor a variable. Furthermore the
import()
has to be inside the
dynamic()
call for Next.js to be able to match webpack bundles / module ids to the specific
dynamic()
call and preload them before rendering.
dynamic()
can't be used inside of React rendering as it needs to be marked in the top level of the module for preloading to work, similar to
React.lazy
.
With named exports
To dynamically import a named export, you can return it from the
Promise
returned by
import()
:
components/hello.js
export
function
Hello
() {
return
<
p
>Hello!</
p
>
}
// pages/index.js
import
dynamic
from
'next/dynamic'
const
DynamicComponent
=
dynamic
(()
=>
import
(
'../components/hello'
)
.then
((mod)
=>
mod
.Hello)
)
With no SSR
To dynamically load a component on the client side, you can use the
ssr
option to disable server-rendering. This is useful if an external dependency or component relies on browser APIs like
window
.
import
dynamic
from
'next/dynamic'
const
DynamicHeader
=
dynamic
(()
=>
import
(
'../components/header'
)
,
{
ssr
:
false
,
})
With external libraries
This example uses the external library
fuse.js
for fuzzy search. The module is only loaded in the browser after the user types in the search input.
import
{ useState }
from
'react'
const
names
=
[
'Tim'
,
'Joe'
,
'Bel'
,
'Lee'
]
export
default
function
Page
() {
const
[
results
,
setResults
]
=
useState
()
return
(
<
div
>
<
input
type
=
"text"
placeholder
=
"Search"
onChange
=
{
async
(e)
=>
{
const
{
value
}
=
e
.currentTarget
// Dynamically load fuse.js
const
Fuse
=
(
await
import
(
'fuse.js'
)).default
const
fuse
=
new
Fuse
(names)
setResults
(
fuse
.search
(value))
}}
/>
<
pre
>Results: {
JSON
.stringify
(results
,
null
,
2
)}</
pre
>
</
div
>
)
}
Previous
Static Assets
Next
Analytics
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.