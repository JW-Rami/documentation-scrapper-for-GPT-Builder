next.config.js Options: output | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using Pages Router
Features available in /pages
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
How it Works
Automatically Copying Traced Files
Caveats
Experimental turbotrace
Edit this page on GitHub
Scroll to top
Pages Router
...
next.config.js Options
output
output
During a build, Next.js will automatically trace each page and its dependencies to determine all of the files that are needed for deploying a production version of your application.
This feature helps reduce the size of deployments drastically. Previously, when deploying with Docker you would need to have all files from your package's
dependencies
installed to run
next start
. Starting with Next.js 12, you can leverage Output File Tracing in the
.next/
directory to only include the necessary files.
Furthermore, this removes the need for the deprecated
serverless
target which can cause various issues and also creates unnecessary duplication.
How it Works
During
next build
, Next.js will use
@vercel/nft
to statically analyze
import
,
require
, and
fs
usage to determine all files that a page might load.
Next.js' production server is also traced for its needed files and output at
.next/next-server.js.nft.json
which can be leveraged in production.
To leverage the
.nft.json
files emitted to the
.next
output directory, you can read the list of files in each trace that are relative to the
.nft.json
file and then copy them to your deployment location.
Automatically Copying Traced Files
Next.js can automatically create a
standalone
folder that copies only the necessary files for a production deployment including select files in
node_modules
.
To leverage this automatic copying you can enable it in your
next.config.js
:
next.config.js
module
.
exports
=
{
output
:
'standalone'
,
}
This will create a folder at
.next/standalone
which can then be deployed on its own without installing
node_modules
.
Additionally, a minimal
server.js
file is also output which can be used instead of
next start
. This minimal server does not copy the
public
or
.next/static
folders by default as these should ideally be handled by a CDN instead, although these folders can be copied to the
standalone/public
and
standalone/.next/static
folders manually, after which
server.js
file will serve these automatically.
Good to know
:
next.config.js
is read during
next build
and serialized into the
server.js
output file. If the legacy
serverRuntimeConfig
or
publicRuntimeConfig
options
are being used, the values will be specific to values at build time.
If your project needs to listen to a specific port or hostname, you can define
PORT
or
HOSTNAME
environment variables before running
server.js
. For example, run
PORT=8080 HOSTNAME=0.0.0.0 node server.js
to start the server on
http://0.0.0.0:8080
.
If your project uses
Image Optimization
with the default
loader
, you must install
sharp
as a dependency:
Terminal
npm
i
sharp
Terminal
yarn
add
sharp
Terminal
pnpm
add
sharp
Terminal
bun
add
sharp
Caveats
While tracing in monorepo setups, the project directory is used for tracing by default. For
next build packages/web-app
,
packages/web-app
would be the tracing root and any files outside of that folder will not be included. To include files outside of this folder you can set
experimental.outputFileTracingRoot
in your
next.config.js
.
packages/web-app/next.config.js
module
.
exports
=
{
experimental
:
{
// this includes files from the monorepo base two directories up
outputFileTracingRoot
:
path
.join
(__dirname
,
'../../'
)
,
}
,
}
There are some cases in which Next.js might fail to include required files, or might incorrectly include unused files. In those cases, you can leverage
experimental.outputFileTracingExcludes
and
experimental.outputFileTracingIncludes
respectively in
next.config.js
. Each config accepts an object with
minimatch globs
for the key to match specific pages and a value of an array with globs relative to the project's root to either include or exclude in the trace.
next.config.js
module
.
exports
=
{
experimental
:
{
outputFileTracingExcludes
:
{
'/api/hello'
:
[
'./un-necessary-folder/**/*'
]
,
}
,
outputFileTracingIncludes
:
{
'/api/another'
:
[
'./necessary-folder/**/*'
]
,
}
,
}
,
}
Currently, Next.js does not do anything with the emitted
.nft.json
files. The files must be read by your deployment platform, for example
Vercel
, to create a minimal deployment. In a future release, a new command is planned to utilize these
.nft.json
files.
Experimental
turbotrace
Tracing dependencies can be slow because it requires very complex computations and analysis. We created
turbotrace
in Rust as a faster and smarter alternative to the JavaScript implementation.
To enable it, you can add the following configuration to your
next.config.js
:
next.config.js
module
.
exports
=
{
experimental
:
{
turbotrace
:
{
// control the log level of the turbotrace, default is `error`
logLevel?
:
|
'bug'
|
'fatal'
|
'error'
|
'warning'
|
'hint'
|
'note'
|
'suggestions'
|
'info'
,
// control if the log of turbotrace should contain the details of the analysis, default is `false`
logDetail?
:
boolean
// show all log messages without limit
// turbotrace only show 1 log message for each categories by default
logAll
?:
boolean
// control the context directory of the turbotrace
// files outside of the context directory will not be traced
// set the `experimental.outputFileTracingRoot` has the same effect
// if the `experimental.outputFileTracingRoot` and this option are both set, the `experimental.turbotrace.contextDirectory` will be used
contextDirectory
?:
string
// if there is `process.cwd()` expression in your code, you can set this option to tell `turbotrace` the value of `process.cwd()` while tracing.
// for example the require(process.cwd() + '/package.json') will be traced as require('/path/to/cwd/package.json')
processCwd
?:
string
// control the maximum memory usage of the `turbotrace`, in `MB`, default is `6000`.
memoryLimit
?:
number
}
,
}
,
}
Previous
onDemandEntries
Next
pageExtensions
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.