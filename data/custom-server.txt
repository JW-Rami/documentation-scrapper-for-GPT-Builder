Configuring: Custom Server | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using Pages Router
Features available in /pages
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Disabling file-system routing
Edit this page on GitHub
Scroll to top
Pages Router
...
Configuring
Custom Server
Custom Server
Examples
Custom Server
SSR Caching
By default, Next.js includes its own server with
next start
. If you have an existing backend, you can still use it with Next.js (this is not a custom server). A custom Next.js server allows you to start a server 100% programmatically in order to use custom server patterns. Most of the time, you will not need this - but it's available for complete customization.
Good to know
:
Before deciding to use a custom server, please keep in mind that it should only be used when the integrated router of Next.js can't meet your app requirements. A custom server will remove important performance optimizations, like
serverless functions
and
Automatic Static Optimization
.
A custom server
cannot
be deployed on
Vercel
.
Take a look at the following example of a custom server:
server.js
const
{
createServer
}
=
require
(
'http'
)
const
{
parse
}
=
require
(
'url'
)
const
next
=
require
(
'next'
)
const
dev
=
process
.
env
.
NODE_ENV
!==
'production'
const
hostname
=
'localhost'
const
port
=
3000
// when using middleware `hostname` and `port` must be provided below
const
app
=
next
({ dev
,
hostname
,
port })
const
handle
=
app
.getRequestHandler
()
app
.prepare
()
.then
(()
=>
{
createServer
(
async
(req
,
res)
=>
{
try
{
// Be sure to pass `true` as the second argument to `url.parse`.
// This tells it to parse the query portion of the URL.
const
parsedUrl
=
parse
(
req
.url
,
true
)
const
{
pathname
,
query
}
=
parsedUrl
if
(pathname
===
'/a'
) {
await
app
.render
(req
,
res
,
'/a'
,
query)
}
else
if
(pathname
===
'/b'
) {
await
app
.render
(req
,
res
,
'/b'
,
query)
}
else
{
await
handle
(req
,
res
,
parsedUrl)
}
}
catch
(err) {
console
.error
(
'Error occurred handling'
,
req
.url
,
err)
res
.statusCode
=
500
res
.end
(
'internal server error'
)
}
})
.once
(
'error'
,
(err)
=>
{
console
.error
(err)
process
.exit
(
1
)
})
.listen
(port
,
()
=>
{
console
.log
(
`> Ready on http://
${
hostname
}
:
${
port
}
`
)
})
})
server.js
doesn't go through babel or webpack. Make sure the syntax and sources this file requires are compatible with the current node version you are running.
To run the custom server you'll need to update the
scripts
in
package.json
like so:
package.json
{
"scripts"
:
{
"dev"
:
"node server.js"
,
"build"
:
"next build"
,
"start"
:
"NODE_ENV=production node server.js"
}
}
The custom server uses the following import to connect the server with the Next.js application:
const
next
=
require
(
'next'
)
const
app
=
next
({})
The above
next
import is a function that receives an object with the following options:
Option
Type
Description
conf
Object
The same object you would use in
next.config.js
. Defaults to
{}
customServer
Boolean
(
Optional
) Set to false when the server was created by Next.js
dev
Boolean
(
Optional
) Whether or not to launch Next.js in dev mode. Defaults to
false
dir
String
(
Optional
) Location of the Next.js project. Defaults to
'.'
quiet
Boolean
(
Optional
) Hide error messages containing server information. Defaults to
false
hostname
String
(
Optional
) The hostname the server is running behind
port
Number
(
Optional
) The port the server is running behind
httpServer
node:http#Server
(
Optional
) The HTTP Server that Next.js is running behind
The returned
app
can then be used to let Next.js handle requests as required.
Disabling file-system routing
By default,
Next
will serve each file in the
pages
folder under a pathname matching the filename. If your project uses a custom server, this behavior may result in the same content being served from multiple paths, which can present problems with SEO and UX.
To disable this behavior and prevent routing based on files in
pages
, open
next.config.js
and disable the
useFileSystemPublicRoutes
config:
next.config.js
module
.
exports
=
{
useFileSystemPublicRoutes
:
false
,
}
Note that
useFileSystemPublicRoutes
disables filename routes from SSR; client-side routing may still access those paths. When using this option, you should guard against navigation to routes you do not want programmatically.
You may also wish to configure the client-side router to disallow client-side redirects to filename routes; for that refer to
router.beforePopState
.
Previous
PostCSS
Next
Draft Mode
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.