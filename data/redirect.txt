Functions: redirect | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using App Router
Features available in /app
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Parameters
Returns
Example
FAQ
Why does redirect use 307 and 308?
Version History
Next Steps
Edit this page on GitHub
Scroll to top
App Router
...
Functions
redirect
redirect
The
redirect
function allows you to redirect the user to another URL.
redirect
can be used in Server Components, Client Components,
Route Handlers
, and
Server Actions
.
When used in a
streaming context
, this will insert a meta tag to emit the redirect on the client side. When used in a server action, it will serve a 303 HTTP redirect response to the caller. Otherwise, it will serve a 307 HTTP redirect response to the caller.
If a resource doesn't exist, you can use the
notFound
function
instead.
Good to know
: If you prefer to return a 308 (Permanent) HTTP redirect instead of 307 (Temporary), you can use the
permanentRedirect
function
instead.
Parameters
The
redirect
function accepts two arguments:
redirect
(path
,
type)
Parameter
Type
Description
path
string
The URL to redirect to. Can be a relative or absolute path.
type
'replace'
(default) or
'push'
(default in Server Actions)
The type of redirect to perform.
By default,
redirect
will use
push
(adding a new entry to the browser history stack) in
Server Actions
and
replace
(replacing the current URL in the browser history stack) everywhere else. You can override this behavior by specifying the
type
parameter.
The
type
parameter has no effect when used in Server Components.
Returns
redirect
does not return any value.
Example
Invoking the
redirect()
function throws a
NEXT_REDIRECT
error and terminates rendering of the route segment in which it was thrown.
Good to know
: If you need to programmatically redirect the user after a certain event in a Client Component, you can use the
useRouter
hook.
app/team/[id]/page.js
import
{ redirect }
from
'next/navigation'
async
function
fetchTeam
(id) {
const
res
=
await
fetch
(
'https://...'
)
if
(
!
res
.ok)
return
undefined
return
res
.json
()
}
export
default
async
function
Profile
({ params }) {
const
team
=
await
fetchTeam
(
params
.id)
if
(
!
team
) {
redirect
(
'/login'
)
}
// ...
}
Good to know
:
redirect
does not require you to use
return redirect()
as it uses the TypeScript
never
type.
FAQ
Why does
redirect
use 307 and 308?
When using
redirect()
you may notice that the status codes used are
307
for a temporary redirect, and
308
for a permanent redirect. While traditionally a
302
was used for a temporary redirect, and a
301
for a permanent redirect, many browsers changed the request method of the redirect, from a
POST
to
GET
request when using a
302
, regardless of the origins request method.
Taking the following example of a redirect from
/users
to
/people
, if you make a
POST
request to
/users
to create a new user, and are conforming to a
302
temporary redirect, the request method will be changed from a
POST
to a
GET
request. This doesn't make sense, as to create a new user, you should be making a
POST
request to
/people
, and not a
GET
request.
The introduction of the
307
status code means that the request method is preserved as
POST
.
302
- Temporary redirect, will change the request method from
POST
to
GET
307
- Temporary redirect, will preserve the request method as
POST
The
redirect()
method uses a
307
by default, instead of a
302
temporary redirect, meaning your requests will
always
be preserved as
POST
requests.
Learn more
about HTTP Redirects.
Version History
Version
Changes
v13.0.0
redirect
introduced.
Next Steps
App Router
...
Functions
permanentRedirect
API Reference for the permanentRedirect function.
Previous
permanentRedirect
Next
revalidatePath
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.