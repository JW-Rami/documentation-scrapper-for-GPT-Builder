Data Fetching: Data Fetching Patterns and Best Practices | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using App Router
Features available in /app
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Fetching Data on the Server
Fetching Data Where It's Needed
Streaming
Parallel and Sequential Data Fetching
Sequential Data Fetching
Parallel Data Fetching
Preloading Data
Using React cache, server-only, and the Preload Pattern
Preventing sensitive data from being exposed to the client
Edit this page on GitHub
Scroll to top
App Router
...
Data Fetching
Data Fetching Patterns and Best Practices
Patterns and Best Practices
There are a few recommended patterns and best practices for fetching data in React and Next.js. This page will go over some of the most common patterns and how to use them.
Fetching Data on the Server
Whenever possible, we recommend fetching data on the server with Server Components. This allows you to:
Have direct access to backend data resources (e.g. databases).
Keep your application more secure by preventing sensitive information, such as access tokens and API keys, from being exposed to the client.
Fetch data and render in the same environment. This reduces both the back-and-forth communication between client and server, as well as the
work on the main thread
on the client.
Perform multiple data fetches with single round-trip instead of multiple individual requests on the client.
Reduce client-server
waterfalls
.
Depending on your region, data fetching can also happen closer to your data source, reducing latency and improving performance.
Then, you can mutate or update data with
Server Actions
.
Fetching Data Where It's Needed
If you need to use the same data (e.g. current user) in multiple components in a tree, you do not have to fetch data globally, nor forward props between components. Instead, you can use
fetch
or React
cache
in the component that needs the data without worrying about the performance implications of making multiple requests for the same data.
This is possible because
fetch
requests are automatically memoized. Learn more about
request memoization
Good to know
: This also applies to layouts, since it's not possible to pass data between a parent layout and its children.
Streaming
Streaming and
Suspense
are React features that allow you to progressively render and incrementally stream rendered units of the UI to the client.
With Server Components and
nested layouts
, you're able to instantly render parts of the page that do not specifically require data, and show a
loading state
for parts of the page that are fetching data. This means the user does not have to wait for the entire page to load before they can start interacting with it.
To learn more about Streaming and Suspense, see the
Loading UI
and
Streaming and Suspense
pages.
Parallel and Sequential Data Fetching
When fetching data inside React components, you need to be aware of two data fetching patterns: Parallel and Sequential.
With
sequential data fetching
, requests in a route are dependent on each other and therefore create waterfalls. There may be cases where you want this pattern because one fetch depends on the result of the other, or you want a condition to be satisfied before the next fetch to save resources. However, this behavior can also be unintentional and lead to longer loading times.
With
parallel data fetching
, requests in a route are eagerly initiated and will load data at the same time. This reduces client-server waterfalls and the total time it takes to load data.
Sequential Data Fetching
If you have nested components, and each component fetches its own data, then data fetching will happen sequentially if those data requests are different (this doesn't apply to requests for the same data as they are automatically
memoized
).
For example, the
Playlists
component will only start fetching data once the
Artist
component has finished fetching data because
Playlists
depends on the
artistID
prop:
app/artist/[username]/page.tsx
// ...
async
function
Playlists
({
artist
ID }
:
{
artist
ID
:
string
}) {
// Wait for the playlists
const
playlists
=
await
getArtistPlaylists
(
artist
ID)
return
(
<
ul
>
{
playlists
.map
((playlist)
=>
(
<
li
key
=
{
playlist
.id}>{
playlist
.name}</
li
>
))}
</
ul
>
)
}
export
default
async
function
Page
({
params: { username }
,
}
:
{
params
:
{ username
:
string
}
}) {
// Wait for the
artist
const
artist
=
await
getArtist
(username)
return
(
<>
<
h1
>{
artist
.name}</
h1
>
<
Suspense
fallback
=
{<
div
>Loading...</
div
>}>
<
Playlists
artist
ID
=
{
artist
.id} />
</
Suspense
>
</>
)
}
In cases like this, you can use
loading.js
(for route segments) or
React
<Suspense>
(for nested components) to show an instant loading state while React streams in the result.
This will prevent the whole route from being blocked by data fetching, and the user will be able to interact with the parts of the page that are not blocked.
Blocking Data Requests:
An alternative approach to prevent waterfalls is to fetch data globally, at the root of your application, but this will block rendering for all route segments beneath it until the data has finished loading. This can be described as "all or nothing" data fetching. Either you have the entire data for your page or application, or none.
Any fetch requests with
await
will block rendering and data fetching for the entire tree beneath it, unless they are wrapped in a
<Suspense>
boundary or
loading.js
is used. Another alternative is to use
parallel data fetching
or the
preload pattern
.
Parallel Data Fetching
To fetch data in parallel, you can eagerly initiate requests by defining them outside the components that use the data, then calling them from inside the component. This saves time by initiating both requests in parallel, however, the user won't see the rendered result until both promises are resolved.
In the example below, the
getArtist
and
getArtistAlbums
functions are defined outside the
Page
component, then called inside the component, and we wait for both promises to resolve:
app/artist/[username]/page.tsx
import
Albums
from
'./albums'
async
function
getArtist
(username
:
string
) {
const
res
=
await
fetch
(
`https://api.example.com/
artist
/
${
username
}
`
)
return
res
.json
()
}
async
function
getArtistAlbums
(username
:
string
) {
const
res
=
await
fetch
(
`https://api.example.com/
artist
/
${
username
}
/albums`
)
return
res
.json
()
}
export
default
async
function
Page
({
params: { username }
,
}
:
{
params
:
{ username
:
string
}
}) {
// Initiate both requests in parallel
const
artist
Data
=
getArtist
(username)
const
albumsData
=
getArtistAlbums
(username)
// Wait for the promises to resolve
const
[
artist
,
albums
]
=
await
Promise
.all
([
artist
Data
,
albumsData])
return
(
<>
<
h1
>{
artist
.name}</
h1
>
<
Albums
list
=
{albums}></
Albums
>
</>
)
}
To improve the user experience, you can add a
Suspense Boundary
to break up the rendering work and show part of the result as soon as possible.
Preloading Data
Another way to prevent waterfalls is to use the preload pattern. You can optionally create a
preload
function to further optimize parallel data fetching. With this approach, you don't have to pass promises down as props. The
preload
function can also have any name as it's a pattern, not an API.
components/Item.tsx
import
{ getItem }
from
'@/utils/get-item'
export
const
preload
=
(id
:
string
)
=>
{
// void evaluates the given expression and returns undefined
// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/void
void
getItem
(id)
}
export
default
async
function
Item
({ id }
:
{ id
:
string
}) {
const
result
=
await
getItem
(id)
// ...
}
app/item/[id]/page.tsx
import
Item
,
{ preload
,
checkIsAvailable }
from
'@/components/Item'
export
default
async
function
Page
({
params: { id }
,
}
:
{
params
:
{ id
:
string
}
}) {
// starting loading
item
data
preload
(id)
// perform another asynchronous task
const
isAvailable
=
await
checkIsAvailable
()
return
isAvailable
?
<
Item
id
=
{id} />
:
null
}
Using React
cache
,
server-only
, and the Preload Pattern
You can combine the
cache
function, the
preload
pattern, and the
server-only
package to create a data fetching utility that can be used throughout your app.
utils/get-item.ts
import
{ cache }
from
'react'
import
'server-only'
export
const
preload
=
(id
:
string
)
=>
{
void
getItem
(id)
}
export
const
getItem
=
cache
(
async
(id
:
string
)
=>
{
// ...
})
With this approach, you can eagerly fetch data, cache responses, and guarantee that this data fetching
only happens on the server
.
The
utils/get-item
exports can be used by Layouts, Pages, or other components to give them control over when an item's data is fetched.
Good to know:
We recommend using the
server-only
package
to make sure server data fetching functions are never used on the client.
Preventing sensitive data from being exposed to the client
We recommend using React's taint APIs,
taintObjectReference
and
taintUniqueValue
, to prevent whole object instances or sensitive values from being passed to the client.
To enable tainting in your application, set the Next.js Config
experimental.taint
option to
true
:
next.config.js
module
.
exports
=
{
experimental
:
{
taint
:
true
,
}
,
}
Then pass the object or value you want to taint to the
experimental_taintObjectReference
or
experimental_taintUniqueValue
functions:
app/utils.ts
import
{ queryDataFromDB }
from
'./api'
import
{
experimental_taintObjectReference
,
experimental_taintUniqueValue
,
}
from
'react'
export
async
function
getUserData
() {
const
data
=
await
queryDataFromDB
()
experimental_taintObjectReference
(
'Do not pass the whole user object to the client'
,
data
)
experimental_taintUniqueValue
(
"Do not pass the user's phone number to the client"
,
data
,
data
.phoneNumber
)
return
data
}
app/page.tsx
import
{ getUserData }
from
'./data'
export
async
function
Page
() {
const
userData
=
getUserData
()
return
(
<
ClientComponent
user
=
{userData}
// this will cause an error because of taintObjectReference
phoneNumber
=
{
userData
.phoneNumber}
// this will cause an error because of taintUniqueValue
/>
)
}
Learn more about
Security and Server Actions
.
Previous
Server Actions and Mutations
Next
Rendering
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.