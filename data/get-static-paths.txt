Functions: getStaticPaths | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using Pages Router
Features available in /pages
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
getStaticPaths return values
paths
fallback: false
fallback: true
When is fallback: true useful?
fallback: 'blocking'
Fallback pages
Version History
Edit this page on GitHub
Scroll to top
Pages Router
...
Functions
getStaticPaths
getStaticPaths
When exporting a function called
getStaticPaths
from a page that uses
Dynamic Routes
, Next.js will statically pre-render all the paths specified by
getStaticPaths
.
pages/repo/[name].tsx
import
type
{
InferGetStaticPropsType
,
GetStaticProps
,
GetStaticPaths
,
}
from
'next'
type
Repo
=
{
name
:
string
stargazers_count
:
number
}
export
const
getStaticPaths
=
(
async
()
=>
{
return
{
paths
:
[
{
params
:
{
name
:
'next.js'
,
}
,
}
,
// See the "paths" section below
]
,
fallback
:
true
,
// false or "blocking"
}
})
satisfies
GetStaticPaths
export
const
getStaticProps
=
(
async
(context)
=>
{
const
res
=
await
fetch
(
'https://api.github.com/
repo
s/vercel/next.js'
)
const
repo
=
await
res
.json
()
return
{ props
:
{
repo
} }
})
satisfies
GetStaticProps
<{
repo
:
Repo
}>
export
default
function
Page
({
repo
,
}
:
InferGetStaticPropsType
<
typeof
getStaticProps>) {
return
repo
.stargazers_count
}
getStaticPaths return values
The
getStaticPaths
function should return an object with the following
required
properties:
paths
The
paths
key determines which paths will be pre-rendered. For example, suppose that you have a page that uses
Dynamic Routes
named
pages/posts/[id].js
. If you export
getStaticPaths
from this page and return the following for
paths
:
return
{
paths
:
[
{ params
:
{ id
:
'1'
}}
,
{
params
:
{ id
:
'2'
}
,
// with i18n configured the locale for the path can be returned as well
locale
:
"en"
,
}
,
]
,
fallback
:
...
}
Then, Next.js will statically generate
/posts/1
and
/posts/2
during
next build
using the page component in
pages/posts/[id].js
.
The value for each
params
object must match the parameters used in the page name:
If the page name is
pages/posts/[postId]/[commentId]
, then
params
should contain
postId
and
commentId
.
If the page name uses
catch-all routes
like
pages/[...slug]
, then
params
should contain
slug
(which is an array). If this array is
['hello', 'world']
, then Next.js will statically generate the page at
/hello/world
.
If the page uses an
optional catch-all route
, use
null
,
[]
,
undefined
or
false
to render the root-most route. For example, if you supply
slug: false
for
pages/[[...slug]]
, Next.js will statically generate the page
/
.
The
params
strings are
case-sensitive
and ideally should be normalized to ensure the paths are generated correctly. For example, if
WoRLD
is returned for a param it will only match if
WoRLD
is the actual path visited, not
world
or
World
.
Separate of the
params
object a
locale
field can be returned when
i18n is configured
, which configures the locale for the path being generated.
fallback: false
If
fallback
is
false
, then any paths not returned by
getStaticPaths
will result in a
404 page
.
When
next build
is run, Next.js will check if
getStaticPaths
returned
fallback: false
, it will then build
only
the paths returned by
getStaticPaths
. This option is useful if you have a small number of paths to create, or new page data is not added often. If you find that you need to add more paths, and you have
fallback: false
, you will need to run
next build
again so that the new paths can be generated.
The following example pre-renders one blog post per page called
pages/posts/[id].js
. The list of blog posts will be fetched from a CMS and returned by
getStaticPaths
. Then, for each page, it fetches the post data from a CMS using
getStaticProps
.
pages/posts/[id].js
function
Post
({ post }) {
// Render post...
}
// This function gets called at build time
export
async
function
getStaticPaths
() {
// Call an external API endpoint to get
posts
const
res
=
await
fetch
(
'https://.../
posts
'
)
const
posts
=
await
res
.json
()
// Get the paths we want to pre-render based on
posts
const
paths
=
posts
.map
((post)
=>
({
params
:
{ id
:
post
.id }
,
}))
// We'll pre-render only these paths at build time.
// { fallback: false } means other routes should 404.
return
{ paths
,
fallback
:
false
}
}
// This also gets called at build time
export
async
function
getStaticProps
({ params }) {
// params contains the post `id`.
// If the route is like /
posts
/1, then params.id is 1
const
res
=
await
fetch
(
`https://.../
posts
/
${
params
.id
}
`
)
const
post
=
await
res
.json
()
// Pass post data to the page via props
return
{ props
:
{ post } }
}
export
default
Post
fallback: true
Examples
Static generation of a large number of pages
If
fallback
is
true
, then the behavior of
getStaticProps
changes in the following ways:
The paths returned from
getStaticPaths
will be rendered to
HTML
at build time by
getStaticProps
.
The paths that have not been generated at build time will
not
result in a 404 page. Instead, Next.js will serve a
“fallback”
version of the page on the first request to such a path. Web crawlers, such as Google, won't be served a fallback and instead the path will behave as in
fallback: 'blocking'
.
When a page with
fallback: true
is navigated to through
next/link
or
next/router
(client-side) Next.js will
not
serve a fallback and instead the page will behave as
fallback: 'blocking'
.
In the background, Next.js will statically generate the requested path
HTML
and
JSON
. This includes running
getStaticProps
.
When complete, the browser receives the
JSON
for the generated path. This will be used to automatically render the page with the required props. From the user’s perspective, the page will be swapped from the fallback page to the full page.
At the same time, Next.js adds this path to the list of pre-rendered pages. Subsequent requests to the same path will serve the generated page, like other pages pre-rendered at build time.
Good to know
:
fallback: true
is not supported when using
output: 'export'
.
When is
fallback: true
useful?
fallback: true
is useful if your app has a very large number of static pages that depend on data (such as a very large e-commerce site). If you want to pre-render all product pages, the builds would take a very long time.
Instead, you may statically generate a small subset of pages and use
fallback: true
for the rest. When someone requests a page that is not generated yet, the user will see the page with a loading indicator or skeleton component.
Shortly after,
getStaticProps
finishes and the page will be rendered with the requested data. From now on, everyone who requests the same page will get the statically pre-rendered page.
This ensures that users always have a fast experience while preserving fast builds and the benefits of Static Generation.
fallback: true
will not
update
generated pages, for that take a look at
Incremental Static Regeneration
.
fallback: 'blocking'
If
fallback
is
'blocking'
, new paths not returned by
getStaticPaths
will wait for the
HTML
to be generated, identical to SSR (hence why
blocking
), and then be cached for future requests so it only happens once per path.
getStaticProps
will behave as follows:
The paths returned from
getStaticPaths
will be rendered to
HTML
at build time by
getStaticProps
.
The paths that have not been generated at build time will
not
result in a 404 page. Instead, Next.js will SSR on the first request and return the generated
HTML
.
When complete, the browser receives the
HTML
for the generated path. From the user’s perspective, it will transition from "the browser is requesting the page" to "the full page is loaded". There is no flash of loading/fallback state.
At the same time, Next.js adds this path to the list of pre-rendered pages. Subsequent requests to the same path will serve the generated page, like other pages pre-rendered at build time.
fallback: 'blocking'
will not
update
generated pages by default. To update generated pages, use
Incremental Static Regeneration
in conjunction with
fallback: 'blocking'
.
Good to know
:
fallback: 'blocking'
is not supported when using
output: 'export'
.
Fallback pages
In the “fallback” version of a page:
The page’s props will be empty.
Using the
router
, you can detect if the fallback is being rendered,
router.isFallback
will be
true
.
The following example showcases using
isFallback
:
pages/posts/[id].js
import
{ useRouter }
from
'next/router'
function
Post
({ post }) {
const
router
=
useRouter
()
// If the page is not yet generated, this will be displayed
// initially until getStaticProps() finishes running
if
(
router
.isFallback) {
return
<
div
>Loading...</
div
>
}
// Render post...
}
// This function gets called at build time
export
async
function
getStaticPaths
() {
return
{
// Only `/
posts
/1` and `/
posts
/2` are generated at build time
paths
:
[{ params
:
{ id
:
'1'
} }
,
{ params
:
{ id
:
'2'
} }]
,
// Enable statically generating additional pages
// For example: `/
posts
/3`
fallback
:
true
,
}
}
// This also gets called at build time
export
async
function
getStaticProps
({ params }) {
// params contains the post `id`.
// If the route is like /
posts
/1, then params.id is 1
const
res
=
await
fetch
(
`https://.../
posts
/
${
params
.id
}
`
)
const
post
=
await
res
.json
()
// Pass post data to the page via props
return
{
props
:
{ post }
,
// Re-generate the post at most once per second
// if a request comes in
revalidate
:
1
,
}
}
export
default
Post
Version History
Version
Changes
v13.4.0
App Router
is now stable with simplifed data fetching, including
generateStaticParams()
v12.2.0
On-Demand Incremental Static Regeneration
is stable.
v12.1.0
On-Demand Incremental Static Regeneration
added (beta).
v9.5.0
Stable
Incremental Static Regeneration
v9.3.0
getStaticPaths
introduced.
Previous
getServerSideProps
Next
getStaticProps
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.