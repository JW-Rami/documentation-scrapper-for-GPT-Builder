Testing: Cypress | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using Pages Router
Features available in /pages
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Manual setup
Creating your first Cypress E2E test
Running E2E Tests
Creating your first Cypress component test
Running Component Tests
Continuous Integration (CI)
Edit this page on GitHub
Scroll to top
Pages Router
...
Testing
Cypress
Setting up Cypress with Next.js
Cypress
is a test runner used for
End-to-End (E2E)
and
Component Testing
. This page will show you how to set up Cypress with Next.js and write your first tests.
Warning:
For
component testing
, Cypress currently does not support
Next.js version 14
and
async
Server Components. These issues are being tracked. Fow now, component testing works with Next.js version 13, and we recommend E2E testing for
async
Server Components.
Cypress currently does not support
TypeScript version 5
with
moduleResolution:"bundler"
. This issue is being tracked.
Manual setup
To manually set up Cypress, install
cypress
as a dev dependency:
Terminal
npm
install
-D
cypress
# or
yarn
add
-D
cypress
# or
pnpm
install
-D
cypress
Add the Cypress
open
command to the
package.json
scripts field:
package.json
{
"scripts"
:
{
"dev"
:
"next dev"
,
"build"
:
"next build"
,
"start"
:
"next start"
,
"lint"
:
"next lint"
,
"cypress:open"
:
"cypress open"
}
}
Run Cypress for the first time to open the Cypress testing suite:
Terminal
npm
run
cypress:open
You can choose to configure
E2E Testing
and/or
Component Testing
. Selecting any of these options will automatically create a
cypress.config.js
file and a
cypress
folder in your project.
Creating your first Cypress E2E test
Ensure your
cypress.config.js
file has the following configuration:
cypress.config.ts
import
{ defineConfig }
from
'cypress'
export
default
defineConfig
({
e2e
:
{
setupNodeEvents
(on
,
config) {}
,
}
,
})
cypress.config.js
const
{
defineConfig
}
=
require
(
'cypress'
)
module
.
exports
=
defineConfig
({
e2e
:
{
setupNodeEvents
(on
,
config) {}
,
}
,
})
Then, create two new Next.js files:
pages/index.js
import
Link
from
'next/link'
export
default
function
Home
() {
return
(
<
div
>
<
h1
>Home</
h1
>
<
Link
href
=
"/about"
>About</
Link
>
</
div
>
)
}
pages/about.js
import
Link
from
'next/link'
export
default
function
About
() {
return
(
<
div
>
<
h1
>About</
h1
>
<
Link
href
=
"/"
>Home</
Link
>
</
div
>
)
}
Add a test to check your navigation is working correctly:
cypress/e2e/app.cy.js
describe
(
'Navigation'
,
()
=>
{
it
(
'should navigate to the about page'
,
()
=>
{
// Start from the index page
cy
.visit
(
'http://localhost:3000/'
)
// Find a link with an href attribute containing "about" and click it
cy
.get
(
'a[href*="about"]'
)
.click
()
// The new url should include "/about"
cy
.url
()
.should
(
'include'
,
'/about'
)
// The new page should contain an h1 with "About"
cy
.get
(
'h1'
)
.contains
(
'About'
)
})
})
Running E2E Tests
Cypress will simulate a user navigating your application, this requires your Next.js server to be running. We recommend running your tests against your production code to more closely resemble how your application will behave.
Run
npm run build && npm run start
to build your Next.js application, then run
npm run cypress:open
in another terminal window to start Cypress and run your E2E testing suite.
Good to know:
You can use
cy.visit("/")
instead of
cy.visit("http://localhost:3000/")
by adding
baseUrl: 'http://localhost:3000'
to the
cypress.config.js
configuration file.
Alternatively, you can install the
start-server-and-test
package to run the Next.js production server in conjuction with Cypress. After installation, add
"test": "start-server-and-test start http://localhost:3000 cypress"
to your
package.json
scripts field. Remember to rebuild your application after new changes.
Creating your first Cypress component test
Component tests build and mount a specific component without having to bundle your whole application or start a server.
Select
Component Testing
in the Cypress app, then select
Next.js
as your front-end framework. A
cypress/component
folder will be created in your project, and a
cypress.config.js
file will be updated to enable component testing.
Ensure your
cypress.config.js
file has the following configuration:
cypress.config.ts
import
{ defineConfig }
from
'cypress'
export
default
defineConfig
({
component
:
{
devServer
:
{
framework
:
'next'
,
bundler
:
'webpack'
,
}
,
}
,
})
cypress.config.js
const
{
defineConfig
}
=
require
(
'cypress'
)
module
.
exports
=
defineConfig
({
component
:
{
devServer
:
{
framework
:
'next'
,
bundler
:
'webpack'
,
}
,
}
,
})
Assuming the same components from the previous section, add a test to validate a component is rendering the expected output:
cypress/component/about.cy.js
import
AboutPage
from
'../../pages/about'
describe
(
'<AboutPage />'
,
()
=>
{
it
(
'should render and display expected content'
,
()
=>
{
// Mount the React
component
for the About page
cy
.mount
(<
AboutPage
/>)
// The new page should contain an h1 with "About page"
cy
.get
(
'h1'
)
.contains
(
'About'
)
// Validate that a link with the expected URL is present
// *Following* the link is better suited to an E2E test
cy
.get
(
'a[href="/"]'
)
.should
(
'be.visible'
)
})
})
Good to know
:
Cypress currently doesn't support component testing for
async
Server Components. We recommend using E2E testing.
Since component tests do not require a Next.js server, features like
<Image />
that rely on a server being available may not function out-of-the-box.
Running Component Tests
Run
npm run cypress:open
in your terminal to start Cypress and run your component testing suite.
Continuous Integration (CI)
In addition to interactive testing, you can also run Cypress headlessly using the
cypress run
command, which is better suited for CI environments:
package.json
{
"scripts"
:
{
//...
"e2e"
:
"start-server-and-test dev http://localhost:3000 \"cypress open --e2e\""
,
"e2e:headless"
:
"start-server-and-test dev http://localhost:3000 \"cypress run --e2e\""
,
"component"
:
"cypress open --component"
,
"component:headless"
:
"cypress run --component"
}
}
You can learn more about Cypress and Continuous Integration from these resources:
Next.js with Cypress example
Cypress Continuous Integration Docs
Cypress GitHub Actions Guide
Official Cypress GitHub Action
Cypress Discord
Previous
Playwright
Next
Deploying
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.