File Conventions: layout.js | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using App Router
Features available in /app
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Props
children (required)
params (optional)
Good to know
Layouts do not receive searchParams
Root Layouts
Version History
Edit this page on GitHub
Scroll to top
App Router
...
File Conventions
layout.js
layout.js
A
layout
is UI that is shared between routes.
app/dashboard/layout.tsx
export
default
function
DashboardLayout
({
children
,
}
:
{
children
:
React
.
ReactNode
}) {
return
<
section
>{children}</
section
>
}
A
root layout
is the top-most layout in the root
app
directory. It is used to define the
<html>
and
<body>
tags and other globally shared UI.
app/layout.tsx
export
default
function
RootLayout
({
children
,
}
:
{
children
:
React
.
ReactNode
}) {
return
(
<
html
lang
=
"en"
>
<
body
>{children}</
body
>
</
html
>
)
}
Props
children
(required)
Layout components should accept and use a
children
prop. During rendering,
children
will be populated with the route segments the layout is wrapping. These will primarily be the component of a child
Layout
(if it exists) or
Page
, but could also be other special files like
Loading
or
Error
when applicable.
params
(optional)
The
dynamic route parameters
object from the root segment down to that layout.
Example
URL
params
app/dashboard/[team]/layout.js
/dashboard/1
{ team: '1' }
app/shop/[tag]/[item]/layout.js
/shop/1/2
{ tag: '1', item: '2' }
app/blog/[...slug]/layout.js
/blog/1/2
{ slug: ['1', '2'] }
For example:
app/shop/[tag]/[item]/layout.tsx
export
default
function
ShopLayout
({
children
,
params
,
}
:
{
children
:
React
.
ReactNode
params
:
{
tag
:
string
item
:
string
}
}) {
// URL -> /
shop
/shoes/nike-air-max-97
// `params` -> { tag: 'shoes', item: 'nike-air-max-97' }
return
<
section
>{children}</
section
>
}
Good to know
Layouts do not receive
searchParams
Unlike
Pages
, Layout components
do not
receive the
searchParams
prop. This is because a shared layout is
not re-rendered during navigation
which could lead to stale
searchParams
between navigations.
When using client-side navigation, Next.js automatically only renders the part of the page below the common layout between two routes.
For example, in the following directory structure,
dashboard/layout.tsx
is the common layout for both
/dashboard/settings
and
/dashboard/analytics
:
When navigating from
/dashboard/settings
to
/dashboard/analytics
,
page.tsx
in
/dashboard/analytics
will rerender on the server, while
dashboard/layout.tsx
will
not
rerender because it's a common UI shared between the two routes.
This performance optimization allows navigation between pages that share a layout to be quicker as only the data fetching and rendering for the page has to run, instead of the entire route that could include shared layouts that fetch their own data.
Because
dashboard/layout.tsx
doesn't re-render, the
searchParams
prop in the layout Server Component might become
stale
after navigation.
Instead, use the Page
searchParams
prop or the
useSearchParams
hook in a Client Component, which is re-rendered on the client with the latest
searchParams
.
Root Layouts
The
app
directory
must
include a root
app/layout.js
.
The root layout
must
define
<html>
and
<body>
tags.
You should
not
manually add
<head>
tags such as
<title>
and
<meta>
to root layouts. Instead, you should use the
Metadata API
which automatically handles advanced requirements such as streaming and de-duplicating
<head>
elements.
You can use
route groups
to create multiple root layouts.
Navigating
across multiple root layouts
will cause a
full page load
(as opposed to a client-side navigation). For example, navigating from
/cart
that uses
app/(shop)/layout.js
to
/blog
that uses
app/(marketing)/layout.js
will cause a full page load. This
only
applies to multiple root layouts.
Version History
Version
Changes
v13.0.0
layout
introduced.
Previous
error.js
Next
loading.js
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.