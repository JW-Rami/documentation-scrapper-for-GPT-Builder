Routing: Pages and Layouts | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using Pages Router
Features available in /pages
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Index routes
Nested routes
Pages with Dynamic Routes
Layout Pattern
Examples
Single Shared Layout with Custom App
Per-Page Layouts
With TypeScript
Data Fetching
Edit this page on GitHub
Scroll to top
Pages Router
...
Routing
Pages and Layouts
Pages and Layouts
The Pages Router has a file-system based router built on the concept of pages.
When a file is added to the
pages
directory, it's automatically available as a route.
In Next.js, a
page
is a
React Component
exported from a
.js
,
.jsx
,
.ts
, or
.tsx
file in the
pages
directory. Each page is associated with a route based on its file name.
Example
: If you create
pages/about.js
that exports a React component like below, it will be accessible at
/about
.
export
default
function
About
() {
return
<
div
>About</
div
>
}
Index routes
The router will automatically route files named
index
to the root of the directory.
pages/index.js
→
/
pages/blog/index.js
→
/blog
Nested routes
The router supports nested files. If you create a nested folder structure, files will automatically be routed in the same way still.
pages/blog/first-post.js
→
/blog/first-post
pages/dashboard/settings/username.js
→
/dashboard/settings/username
Pages with Dynamic Routes
Next.js supports pages with dynamic routes. For example, if you create a file called
pages/posts/[id].js
, then it will be accessible at
posts/1
,
posts/2
, etc.
To learn more about dynamic routing, check the
Dynamic Routing documentation
.
Layout Pattern
The React model allows us to deconstruct a
page
into a series of components. Many of these components are often reused between pages. For example, you might have the same navigation bar and footer on every page.
components/layout.js
import
Navbar
from
'./navbar'
import
Footer
from
'./footer'
export
default
function
Layout
({ children }) {
return
(
<>
<
Navbar
/>
<
main
>{children}</
main
>
<
Footer
/>
</>
)
}
Examples
Single Shared Layout with Custom App
If you only have one layout for your entire application, you can create a
Custom App
and wrap your application with the layout. Since the
<Layout />
component is re-used when changing pages, its component state will be preserved (e.g. input values).
pages/_app.js
import
Layout
from
'../components/layout'
export
default
function
MyApp
({ Component
,
pageProps }) {
return
(
<
Layout
>
<
Component
{
...
pageProps} />
</
Layout
>
)
}
Per-Page Layouts
If you need multiple layouts, you can add a property
getLayout
to your page, allowing you to return a React component for the layout. This allows you to define the layout on a
per-page basis
. Since we're returning a function, we can have complex nested layouts if desired.
pages/index.js
import
Layout
from
'../components/layout'
import
NestedLayout
from
'../components/nested-layout'
export
default
function
Page
() {
return
(
/** Your content */
)
}
Page
.
getLayout
=
function
getLayout
(page) {
return
(
<
Layout
>
<
NestedLayout
>{page}</
NestedLayout
>
</
Layout
>
)
}
pages/_app.js
export
default
function
MyApp
({ Component
,
pageProps }) {
// Use the layout defined at the page level, if available
const
getLayout
=
Component
.getLayout
||
((page)
=>
page)
return
getLayout
(<
Component
{
...
pageProps} />)
}
When navigating between pages, we want to
persist
page state (input values, scroll position, etc.) for a Single-Page Application (SPA) experience.
This layout pattern enables state persistence because the React component tree is maintained between page transitions. With the component tree, React can understand which elements have changed to preserve state.
Good to know
: This process is called
reconciliation
, which is how React understands which elements have changed.
With TypeScript
When using TypeScript, you must first create a new type for your pages which includes a
getLayout
function. Then, you must create a new type for your
AppProps
which overrides the
Component
property to use the previously created type.
pages/index.tsx
import
type
{ ReactElement }
from
'react'
import
Layout
from
'../components/layout'
import
NestedLayout
from
'../components/nested-layout'
import
type
{ NextPageWithLayout }
from
'./_app'
const
Page
:
NextPageWithLayout
=
()
=>
{
return
<
p
>hello world</
p
>
}
Page
.
getLayout
=
function
getLayout
(page
:
ReactElement
) {
return
(
<
Layout
>
<
NestedLayout
>{page}</
NestedLayout
>
</
Layout
>
)
}
export
default
Page
pages/_app.tsx
import
type
{ ReactElement
,
ReactNode }
from
'react'
import
type
{ NextPage }
from
'next'
import
type
{ AppProps }
from
'next/app'
export
type
NextPageWithLayout
<
P
=
{}
,
IP
=
P
>
=
NextPage
<
P
,
IP
>
&
{
getLayout
?:
(page
:
ReactElement
)
=>
ReactNode
}
type
AppPropsWithLayout
=
AppProps
&
{
Component
:
NextPageWithLayout
}
export
default
function
MyApp
({ Component
,
pageProps }
:
AppPropsWithLayout
) {
// Use the layout defined at the page level, if available
const
getLayout
=
Component
.getLayout
??
((page)
=>
page)
return
getLayout
(<
Component
{
...
pageProps} />)
}
Data Fetching
Inside your layout, you can fetch data on the client-side using
useEffect
or a library like
SWR
. Because this file is not a
Page
, you cannot use
getStaticProps
or
getServerSideProps
currently.
components/layout.js
import
useSWR
from
'swr'
import
Navbar
from
'./navbar'
import
Footer
from
'./footer'
export
default
function
Layout
({ children }) {
const
{
data
,
error
}
=
useSWR
(
'/api/navigation'
,
fetcher)
if
(error)
return
<
div
>Failed to load</
div
>
if
(
!
data)
return
<
div
>Loading...</
div
>
return
(
<>
<
Navbar
links
=
{
data
.links} />
<
main
>{children}</
main
>
<
Footer
/>
</>
)
}
Previous
Routing
Next
Dynamic Routes
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.