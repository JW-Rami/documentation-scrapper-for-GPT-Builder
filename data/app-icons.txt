Metadata Files: favicon, icon, and apple-icon | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using App Router
Features available in /app
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Image files (.ico, .jpg, .png)
favicon
icon
apple-icon
Generate icons using code (.js, .ts, .tsx)
Props
params (optional)
Returns
Config exports
size
contentType
Route Segment Config
Version History
Edit this page on GitHub
Scroll to top
App Router
...
Metadata Files
favicon, icon, and apple-icon
favicon, icon, and apple-icon
The
favicon
,
icon
, or
apple-icon
file conventions allow you to set icons for your application.
They are useful for adding app icons that appear in places like web browser tabs, phone home screens, and search engine results.
There are two ways to set app icons:
Using image files (.ico, .jpg, .png)
Using code to generate an icon (.js, .ts, .tsx)
Image files (.ico, .jpg, .png)
Use an image file to set an app icon by placing a
favicon
,
icon
, or
apple-icon
image file within your
/app
directory.
The
favicon
image can only be located in the top level of
app/
.
Next.js will evaluate the file and automatically add the appropriate tags to your app's
<head>
element.
File convention
Supported file types
Valid locations
favicon
.ico
app/
icon
.ico
,
.jpg
,
.jpeg
,
.png
,
.svg
app/**/*
apple-icon
.jpg
,
.jpeg
,
.png
app/**/*
favicon
Add a
favicon.ico
image file to the root
/app
route segment.
<head> output
<
link
rel
=
"icon"
href
=
"/favicon.ico"
sizes
=
"any"
/>
icon
Add an
icon.(ico|jpg|jpeg|png|svg)
image file.
<head> output
<
link
rel
=
"icon"
href
=
"/icon?<generated>"
type
=
"image/<generated>"
sizes
=
"<generated>"
/>
apple-icon
Add an
apple-icon.(jpg|jpeg|png)
image file.
<head> output
<
link
rel
=
"apple-touch-icon"
href
=
"/apple-icon?<generated>"
type
=
"image/<generated>"
sizes
=
"<generated>"
/>
Good to know
You can set multiple icons by adding a number suffix to the file name. For example,
icon1.png
,
icon2.png
, etc. Numbered files will sort lexically.
Favicons can only be set in the root
/app
segment. If you need more granularity, you can use
icon
.
The appropriate
<link>
tags and attributes such as
rel
,
href
,
type
, and
sizes
are determined by the icon type and metadata of the evaluated file.
For example, a 32 by 32px
.png
file will have
type="image/png"
and
sizes="32x32"
attributes.
sizes="any"
is added to
favicon.ico
output to
avoid a browser bug
where an
.ico
icon is favored over
.svg
.
Generate icons using code (.js, .ts, .tsx)
In addition to using
literal image files
, you can programmatically
generate
icons using code.
Generate an app icon by creating an
icon
or
apple-icon
route that default exports a function.
File convention
Supported file types
icon
.js
,
.ts
,
.tsx
apple-icon
.js
,
.ts
,
.tsx
The easiest way to generate an icon is to use the
ImageResponse
API from
next/og
.
app/icon.tsx
import
{ ImageResponse }
from
'next/og'
// Route segment config
export
const
runtime
=
'edge'
// Image metadata
export
const
size
=
{
width
:
32
,
height
:
32
,
}
export
const
contentType
=
'image/png'
// Image generation
export
default
function
Icon
() {
return
new
ImageResponse
(
(
// ImageResponse JSX element
<
div
style
=
{{
fontSize
:
24
,
background
:
'black'
,
width
:
'100%'
,
height
:
'100%'
,
display
:
'flex'
,
alignItems
:
'center'
,
justifyContent
:
'center'
,
color
:
'white'
,
}}
>
A
</
div
>
)
,
// ImageResponse options
{
// For convenience, we can re-use the exported icons size metadata
// config to also set the ImageResponse's width and height.
...
size
,
}
)
}
<head> output
<
link
rel
=
"icon"
href
=
"/icon?<generated>"
type
=
"image/png"
sizes
=
"32x32"
/>
Good to know
By default, generated icons are
statically optimized
(generated at build time and cached) unless they use
dynamic functions
or uncached data.
You can generate multiple icons in the same file using
generateImageMetadata
.
You cannot generate a
favicon
icon. Use
icon
or a
favicon.ico
file instead.
Props
The default export function receives the following props:
params
(optional)
An object containing the
dynamic route parameters
object from the root segment down to the segment
icon
or
apple-icon
is colocated in.
app/shop/[slug]/icon.tsx
export
default
function
Icon
({ params }
:
{ params
:
{ slug
:
string
} }) {
// ...
}
Route
URL
params
app/shop/icon.js
/shop
undefined
app/shop/[slug]/icon.js
/shop/1
{ slug: '1' }
app/shop/[tag]/[item]/icon.js
/shop/1/2
{ tag: '1', item: '2' }
app/shop/[...slug]/icon.js
/shop/1/2
{ slug: ['1', '2'] }
Returns
The default export function should return a
Blob
|
ArrayBuffer
|
TypedArray
|
DataView
|
ReadableStream
|
Response
.
Good to know
:
ImageResponse
satisfies this return type.
Config exports
You can optionally configure the icon's metadata by exporting
size
and
contentType
variables from the
icon
or
apple-icon
route.
Option
Type
size
{ width: number; height: number }
contentType
string
-
image MIME type
size
icon.tsx | apple-icon.tsx
export
const
size
=
{ width
:
32
,
height
:
32
}
export
default
function
Icon
() {}
<head> output
<
link
rel
=
"icon"
sizes
=
"32x32"
/>
contentType
icon.tsx | apple-icon.tsx
export
const
contentType
=
'image/png'
export
default
function
Icon
() {}
<head> output
<
link
rel
=
"icon"
type
=
"image/png"
/>
Route Segment Config
icon
and
apple-icon
are specialized
Route Handlers
that can use the same
route segment configuration
options as Pages and Layouts.
Option
Type
Default
dynamic
'auto' | 'force-dynamic' | 'error' | 'force-static'
'auto'
revalidate
false | 'force-cache' | 0 | number
false
runtime
'nodejs' | 'edge'
'nodejs'
preferredRegion
'auto' | 'global' | 'home' | string | string[]
'auto'
app/icon.tsx
export
const
runtime
=
'edge'
export
default
function
Icon
() {}
Version History
Version
Changes
v13.3.0
favicon
icon
and
apple-icon
introduced
Previous
Metadata Files
Next
manifest.json
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.