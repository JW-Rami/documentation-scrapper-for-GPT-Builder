Rendering: Static Site Generation (SSG) | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using Pages Router
Features available in /pages
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Static Generation without data
Static Generation with data
Scenario 1: Your page content depends on external data
Scenario 2: Your page paths depend on external data
When should I use Static Generation?
Edit this page on GitHub
Scroll to top
Pages Router
...
Rendering
Static Site Generation (SSG)
Static Site Generation (SSG)
Examples
WordPress Example
(
Demo
)
Blog Starter using markdown files
(
Demo
)
DatoCMS Example
(
Demo
)
TakeShape Example
(
Demo
)
Sanity Example
(
Demo
)
Prismic Example
(
Demo
)
Contentful Example
(
Demo
)
Strapi Example
(
Demo
)
Prepr Example
(
Demo
)
Agility CMS Example
(
Demo
)
Cosmic Example
(
Demo
)
ButterCMS Example
(
Demo
)
Storyblok Example
(
Demo
)
GraphCMS Example
(
Demo
)
Kontent Example
(
Demo
)
Builder.io Example
(
Demo
)
TinaCMS Example
(
Demo
)
Static Tweet (Demo)
Enterspeed Example
(
Demo
)
If a page uses
Static Generation
, the page HTML is generated at
build time
. That means in production, the page HTML is generated when you run
next build
. This HTML will then be reused on each request. It can be cached by a CDN.
In Next.js, you can statically generate pages
with or without data
. Let's take a look at each case.
Static Generation without data
By default, Next.js pre-renders pages using Static Generation without fetching data. Here's an example:
function
About
() {
return
<
div
>About</
div
>
}
export
default
About
Note that this page does not need to fetch any external data to be pre-rendered. In cases like this, Next.js generates a single HTML file per page during build time.
Static Generation with data
Some pages require fetching external data for pre-rendering. There are two scenarios, and one or both might apply. In each case, you can use these functions that Next.js provides:
Your page
content
depends on external data: Use
getStaticProps
.
Your page
paths
depend on external data: Use
getStaticPaths
(usually in addition to
getStaticProps
).
Scenario 1: Your page content depends on external data
Example
: Your blog page might need to fetch the list of blog posts from a CMS (content management system).
// TODO: Need to fetch `posts` (by calling some API endpoint)
//       before this page can be pre-rendered.
export
default
function
Blog
({ posts }) {
return
(
<
ul
>
{
posts
.map
((post)
=>
(
<
li
>{
post
.title}</
li
>
))}
</
ul
>
)
}
To fetch this data on pre-render, Next.js allows you to
export
an
async
function called
getStaticProps
from the same file. This function gets called at build time and lets you pass fetched data to the page's
props
on pre-render.
export
default
function
Blog
({ posts }) {
// Render posts...
}
// This function gets called at build time
export
async
function
getStaticProps
() {
// Call an external API endpoint to get posts
const
res
=
await
fetch
(
'https://.../posts'
)
const
posts
=
await
res
.json
()
// By returning { props: { posts } }, the Blog component
// will receive `posts` as a prop at build time
return
{
props
:
{
posts
,
}
,
}
}
To learn more about how
getStaticProps
works, check out the
Data Fetching documentation
.
Scenario 2: Your page paths depend on external data
Next.js allows you to create pages with
dynamic routes
. For example, you can create a file called
pages/posts/[id].js
to show a single blog post based on
id
. This will allow you to show a blog post with
id: 1
when you access
posts/1
.
To learn more about dynamic routing, check the
Dynamic Routing documentation
.
However, which
id
you want to pre-render at build time might depend on external data.
Example
: suppose that you've only added one blog post (with
id: 1
) to the database. In this case, you'd only want to pre-render
posts/1
at build time.
Later, you might add the second post with
id: 2
. Then you'd want to pre-render
posts/2
as well.
So your page
paths
that are pre-rendered depend on external data. To handle this, Next.js lets you
export
an
async
function called
getStaticPaths
from a dynamic page (
pages/posts/[id].js
in this case). This function gets called at build time and lets you specify which paths you want to pre-render.
// This function gets called at build time
export
async
function
getStaticPaths
() {
// Call an external API endpoint to get posts
const
res
=
await
fetch
(
'https://.../posts'
)
const
posts
=
await
res
.json
()
// Get the paths we want to pre-render based on posts
const
paths
=
posts
.map
((post)
=>
({
params
:
{ id
:
post
.id }
,
}))
// We'll pre-render only these paths at build time.
// { fallback: false } means other routes should 404.
return
{ paths
,
fallback
:
false
}
}
Also in
pages/posts/[id].js
, you need to export
getStaticProps
so that you can fetch the data about the post with this
id
and use it to pre-render the page:
export
default
function
Post
({ post }) {
// Render post...
}
export
async
function
getStaticPaths
() {
// ...
}
// This also gets called at build time
export
async
function
getStaticProps
({ params }) {
// params contains the post `id`.
// If the route is like /posts/1, then params.id is 1
const
res
=
await
fetch
(
`https://.../posts/
${
params
.id
}
`
)
const
post
=
await
res
.json
()
// Pass post data to the page via props
return
{ props
:
{ post } }
}
To learn more about how
getStaticPaths
works, check out the
Data Fetching documentation
.
When should I use Static Generation?
We recommend using
Static Generation
(with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.
You can use Static Generation for many types of pages, including:
Marketing pages
Blog posts and portfolios
E-commerce product listings
Help and documentation
You should ask yourself: "Can I pre-render this page
ahead
of a user's request?" If the answer is yes, then you should choose Static Generation.
On the other hand, Static Generation is
not
a good idea if you cannot pre-render a page ahead of a user's request. Maybe your page shows frequently updated data, and the page content changes on every request.
In cases like this, you can do one of the following:
Use Static Generation with
Client-side data fetching:
You can skip pre-rendering some parts of a page and then use client-side JavaScript to populate them. To learn more about this approach, check out the
Data Fetching documentation
.
Use
Server-Side Rendering:
Next.js pre-renders a page on each request. It will be slower because the page cannot be cached by a CDN, but the pre-rendered page will always be up-to-date. We'll talk about this approach below.
Previous
Server-side Rendering (SSR)
Next
Automatic Static Optimization
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.