Configuring: TypeScript | Next.js
Skip to content
Search documentation...
Search...
âŒ˜K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
âŒ˜K
Feedback
Learn
Menu
Using App Router
Features available in /app
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
New Projects
Existing Projects
TypeScript Plugin
Plugin Features
Minimum TypeScript Version
Statically Typed Links
End-to-End Type Safety
Async Server Component TypeScript Error
Passing Data Between Server & Client Components
Path aliases and baseUrl
Type checking next.config.js
Incremental type checking
Ignoring TypeScript Errors
Version Changes
Edit this page on GitHub
Scroll to top
App Router
...
Configuring
TypeScript
TypeScript
Next.js provides a TypeScript-first development experience for building your React application.
It comes with built-in TypeScript support for automatically installing the necessary packages and configuring the proper settings.
As well as a
TypeScript Plugin
for your editor.
ðŸŽ¥ Watch:
Learn about the built-in TypeScript plugin â†’
YouTube (3 minutes)
New Projects
create-next-app
now ships with TypeScript by default.
Terminal
npx
create-next-app@latest
Existing Projects
Add TypeScript to your project by renaming a file to
.ts
/
.tsx
. Run
next dev
and
next build
to automatically install the necessary dependencies and add a
tsconfig.json
file with the recommended config options.
If you already had a
jsconfig.json
file, copy the
paths
compiler option from the old
jsconfig.json
into the new
tsconfig.json
file, and delete the old
jsconfig.json
file.
TypeScript Plugin
Next.js includes a custom TypeScript plugin and type checker, which VSCode and other code editors can use for advanced type-checking and auto-completion.
You can enable the plugin in VS Code by:
Opening the command palette (
Ctrl/âŒ˜
+
Shift
+
P
)
Searching for "TypeScript: Select TypeScript Version"
Selecting "Use Workspace Version"
Now, when editing files, the custom plugin will be enabled. When running
next build
, the custom type checker will be used.
Plugin Features
The TypeScript plugin can help with:
Warning if the invalid values for
segment config options
are passed.
Showing available options and in-context documentation.
Ensuring the
use client
directive is used correctly.
Ensuring client hooks (like
useState
) are only used in Client Components.
Good to know
: More features will be added in the future.
Minimum TypeScript Version
It is highly recommended to be on at least
v4.5.2
of TypeScript to get syntax features such as
type modifiers on import names
and
performance improvements
.
Statically Typed Links
Next.js can statically type links to prevent typos and other errors when using
next/link
, improving type safety when navigating between pages.
To opt-into this feature,
experimental.typedRoutes
need to be enabled and the project needs to be using TypeScript.
next.config.js
/**
@type
{import('next').NextConfig}
*/
const
nextConfig
=
{
experimental
:
{
typedRoutes
:
true
,
}
,
}
module
.
exports
=
nextConfig
Next.js will generate a link definition in
.next/types
that contains information about all existing routes in your application, which TypeScript can then use to provide feedback in your editor about invalid links.
Currently, experimental support includes any string literal, including dynamic segments. For non-literal strings, you currently need to manually cast the
href
with
as Route
:
import
type
{ Route }
from
'next'
;
import
Link
from
'next/link'
// No TypeScript errors if href is a valid route
<
Link
href
=
"/about"
/>
<
Link
href
=
"/blog/nextjs"
/>
<
Link
href
=
{
`/blog/
${
slug
}
`
} />
<
Link
href
=
{(
'/blog'
+
slug)
as
Route
} />
// TypeScript errors if href is not a valid route
<
Link
href
=
"/aboot"
/>
To accept
href
in a custom component wrapping
next/link
, use a generic:
import
type
{ Route }
from
'next'
import
Link
from
'next/link'
function
Card
<
T
extends
string
>({ href }
:
{ href
:
Route
<
T
>
|
URL
}) {
return
(
<
Link
href
=
{href}>
<
div
>My Card</
div
>
</
Link
>
)
}
How does it work?
When running
next dev
or
next build
, Next.js generates a hidden
.d.ts
file inside
.next
that contains information about all existing routes in your application (all valid routes as the
href
type of
Link
). This
.d.ts
file is included in
tsconfig.json
and the TypeScript compiler will check that
.d.ts
and provide feedback in your editor about invalid links.
End-to-End Type Safety
Next.js 13 has
enhanced type safety
. This includes:
No serialization of data between fetching function and page
: You can
fetch
directly in components, layouts, and pages on the server. This data
does not
need to be serialized (converted to a string) to be passed to the client side for consumption in React. Instead, since
app
uses Server Components by default, we can use values like
Date
,
Map
,
Set
, and more without any extra steps. Previously, you needed to manually type the boundary between server and client with Next.js-specific types.
Streamlined data flow between components
: With the removal of
_app
in favor of root layouts, it is now easier to visualize the data flow between components and pages. Previously, data flowing between individual
pages
and
_app
were difficult to type and could introduce confusing bugs. With
colocated data fetching
in Next.js 13, this is no longer an issue.
Data Fetching in Next.js
now provides as close to end-to-end type safety as possible without being prescriptive about your database or content provider selection.
We're able to type the response data as you would expect with normal TypeScript. For example:
app/page.tsx
async
function
getData
() {
const
res
=
await
fetch
(
'https://api.example.com/...'
)
// The return value is *not* serialized
// You can return Date, Map, Set, etc.
return
res
.json
()
}
export
default
async
function
Page
() {
const
name
=
await
getData
()
return
'...'
}
For
complete
end-to-end type safety, this also requires your database or content provider to support TypeScript. This could be through using an
ORM
or type-safe query builder.
Async Server Component TypeScript Error
To use an
async
Server Component with TypeScript, ensure you are using TypeScript
5.1.3
or higher and
@types/react
18.2.8
or higher.
If you are using an older version of TypeScript, you may see a
'Promise<Element>' is not a valid JSX element
type error. Updating to the latest version of TypeScript and
@types/react
should resolve this issue.
Passing Data Between Server & Client Components
When passing data between a Server and Client Component through props, the data is still serialized (converted to a string) for use in the browser. However, it does not need a special type. Itâ€™s typed the same as passing any other props between components.
Further, there is less code to be serialized, as un-rendered data does not cross between the server and client (it remains on the server). This is only now possible through support for Server Components.
Path aliases and baseUrl
Next.js automatically supports the
tsconfig.json
"paths"
and
"baseUrl"
options.
You can learn more about this feature on the
Module Path aliases documentation
.
Type checking next.config.js
The
next.config.js
file must be a JavaScript file as it does not get parsed by Babel or TypeScript, however you can add some type checking in your IDE using JSDoc as below:
// @ts-check
/**
*
@type
{import('next').NextConfig}
**/
const
nextConfig
=
{
/* config options here */
}
module
.
exports
=
nextConfig
Incremental type checking
Since
v10.2.1
Next.js supports
incremental type checking
when enabled in your
tsconfig.json
, this can help speed up type checking in larger applications.
Ignoring TypeScript Errors
Next.js fails your
production build
(
next build
) when TypeScript errors are present in your project.
If you'd like Next.js to dangerously produce production code even when your application has errors, you can disable the built-in type checking step.
If disabled, be sure you are running type checks as part of your build or deploy process, otherwise this can be very dangerous.
Open
next.config.js
and enable the
ignoreBuildErrors
option in the
typescript
config:
next.config.js
module
.
exports
=
{
typescript
:
{
// !! WARN !!
// Dangerously allow production builds to successfully complete even if
// your project has type errors.
// !! WARN !!
ignoreBuildErrors
:
true
,
}
,
}
Version Changes
Version
Changes
v13.2.0
Statically typed links are available in beta.
v12.0.0
SWC
is now used by default to compile TypeScript and TSX for faster builds.
v10.2.1
Incremental type checking
support added when enabled in your
tsconfig.json
.
Previous
Configuring
Next
ESLint
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
Â©
2023
Vercel
, Inc.