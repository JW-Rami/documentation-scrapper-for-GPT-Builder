Configuring: PostCSS | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using Pages Router
Features available in /pages
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Default Behavior
Customizing Target Browsers
CSS Modules
Customizing Plugins
Edit this page on GitHub
Scroll to top
Pages Router
...
Configuring
PostCSS
PostCSS
Examples
Tailwind CSS Example
Default Behavior
Next.js compiles CSS for its
built-in CSS support
using PostCSS.
Out of the box, with no configuration, Next.js compiles CSS with the following transformations:
Autoprefixer
automatically adds vendor prefixes to CSS rules (back to IE11).
Cross-browser Flexbox bugs
are corrected to behave like
the spec
.
New CSS features are automatically compiled for Internet Explorer 11 compatibility:
all
Property
Break Properties
font-variant
Property
Gap Properties
Media Query Ranges
By default,
CSS Grid
and
Custom Properties
(CSS variables) are
not compiled
for IE11 support.
To compile
CSS Grid Layout
for IE11, you can place the following comment at the top of your CSS file:
/* autoprefixer grid: autoplace */
You can also enable IE11 support for
CSS Grid Layout
in your entire project by configuring autoprefixer with the configuration shown below (collapsed).
See
"Customizing Plugins"
below for more information.
Click to view the configuration to enable CSS Grid Layout
postcss.config.json
{
"plugins"
:
[
"postcss-flexbugs-fixes"
,
[
"postcss-preset-env"
,
{
"autoprefixer"
:
{
"flexbox"
:
"no-2009"
,
"grid"
:
"autoplace"
}
,
"stage"
:
3
,
"features"
:
{
"custom-properties"
:
false
}
}
]
]
}
CSS variables are not compiled because it is
not possible to safely do so
.
If you must use variables, consider using something like
Sass variables
which are compiled away by
Sass
.
Customizing Target Browsers
Next.js allows you to configure the target browsers (for
Autoprefixer
and compiled css features) through
Browserslist
.
To customize browserslist, create a
browserslist
key in your
package.json
like so:
package.json
{
"browserslist"
:
[
">0.3%"
,
"not dead"
,
"not op_mini all"
]
}
You can use the
browsersl.ist
tool to visualize what browsers you are targeting.
CSS Modules
No configuration is needed to support CSS Modules. To enable CSS Modules for a file, rename the file to have the extension
.module.css
.
You can learn more about
Next.js' CSS Module support here
.
Customizing Plugins
Warning
: When you define a custom PostCSS configuration file, Next.js
completely disables
the
default behavior
.
Be sure to manually configure all the features you need compiled, including
Autoprefixer
.
You also need to install any plugins included in your custom configuration manually, i.e.
npm install postcss-flexbugs-fixes postcss-preset-env
.
To customize the PostCSS configuration, create a
postcss.config.json
file in the root of your project.
This is the default configuration used by Next.js:
postcss.config.json
{
"plugins"
:
[
"postcss-flexbugs-fixes"
,
[
"postcss-preset-env"
,
{
"autoprefixer"
:
{
"flexbox"
:
"no-2009"
}
,
"stage"
:
3
,
"features"
:
{
"custom-properties"
:
false
}
}
]
]
}
Good to know
: Next.js also allows the file to be named
.postcssrc.json
, or, to be read from the
postcss
key in
package.json
.
It is also possible to configure PostCSS with a
postcss.config.js
file, which is useful when you want to conditionally include plugins based on environment:
postcss.config.js
module
.
exports
=
{
plugins
:
process
.
env
.
NODE_ENV
===
'production'
?
[
'postcss-flexbugs-fixes'
,
[
'postcss-preset-env'
,
{
autoprefixer
:
{
flexbox
:
'no-2009'
,
}
,
stage
:
3
,
features
:
{
'custom-properties'
:
false
,
}
,
}
,
]
,
]
:
[
// No transformations in development
]
,
}
Good to know
: Next.js also allows the file to be named
.postcssrc.js
.
Do
not use
require()
to import the PostCSS Plugins. Plugins must be provided as strings.
Good to know
: If your
postcss.config.js
needs to support other non-Next.js tools in the same project, you must use the interoperable object-based format instead:
module
.
exports
=
{
plugins
:
{
'postcss-flexbugs-fixes'
:
{}
,
'postcss-preset-env'
:
{
autoprefixer
:
{
flexbox
:
'no-2009'
,
}
,
stage
:
3
,
features
:
{
'custom-properties'
:
false
,
}
,
}
,
}
,
}
Previous
Babel
Next
Custom Server
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.