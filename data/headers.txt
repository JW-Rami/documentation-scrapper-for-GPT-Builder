next.config.js Options: headers | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using Pages Router
Features available in /pages
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Header Overriding Behavior
Path Matching
Wildcard Path Matching
Regex Path Matching
Header, Cookie, and Query Matching
Headers with basePath support
Headers with i18n support
Cache-Control
Options
X-DNS-Prefetch-Control
Strict-Transport-Security
X-Frame-Options
Permissions-Policy
X-Content-Type-Options
Referrer-Policy
Content-Security-Policy
Version History
Edit this page on GitHub
Scroll to top
Pages Router
...
next.config.js Options
headers
headers
Headers allow you to set custom HTTP headers on the response to an incoming request on a given path.
To set custom HTTP headers you can use the
headers
key in
next.config.js
:
next.config.js
module
.
exports
=
{
async
headers
() {
return
[
{
source
:
'/about'
,
headers
:
[
{
key
:
'x-custom-header'
,
value
:
'my custom header value'
,
}
,
{
key
:
'x-another-custom-header'
,
value
:
'my other custom header value'
,
}
,
]
,
}
,
]
}
,
}
headers
is an async function that expects an array to be returned holding objects with
source
and
headers
properties:
source
is the incoming request path pattern.
headers
is an array of response header objects, with
key
and
value
properties.
basePath
:
false
or
undefined
- if false the basePath won't be included when matching, can be used for external rewrites only.
locale
:
false
or
undefined
- whether the locale should not be included when matching.
has
is an array of
has objects
with the
type
,
key
and
value
properties.
missing
is an array of
missing objects
with the
type
,
key
and
value
properties.
Headers are checked before the filesystem which includes pages and
/public
files.
Header Overriding Behavior
If two headers match the same path and set the same header key, the last header key will override the first. Using the below headers, the path
/hello
will result in the header
x-hello
being
world
due to the last header value set being
world
.
next.config.js
module
.
exports
=
{
async
headers
() {
return
[
{
source
:
'/:path*'
,
headers
:
[
{
key
:
'x-hello'
,
value
:
'there'
,
}
,
]
,
}
,
{
source
:
'/hello'
,
headers
:
[
{
key
:
'x-hello'
,
value
:
'world'
,
}
,
]
,
}
,
]
}
,
}
Path Matching
Path matches are allowed, for example
/blog/:slug
will match
/blog/hello-world
(no nested paths):
next.config.js
module
.
exports
=
{
async
headers
() {
return
[
{
source
:
'/blog/:slug'
,
headers
:
[
{
key
:
'x-slug'
,
value
:
':slug'
,
// Matched parameters can be used in the value
}
,
{
key
:
'x-slug-:slug'
,
// Matched parameters can be used in the key
value
:
'my other custom header value'
,
}
,
]
,
}
,
]
}
,
}
Wildcard Path Matching
To match a wildcard path you can use
*
after a parameter, for example
/blog/:slug*
will match
/blog/a/b/c/d/hello-world
:
next.config.js
module
.
exports
=
{
async
headers
() {
return
[
{
source
:
'/blog/:slug*'
,
headers
:
[
{
key
:
'x-slug'
,
value
:
':slug*'
,
// Matched parameters can be used in the value
}
,
{
key
:
'x-slug-:slug*'
,
// Matched parameters can be used in the key
value
:
'my other custom header value'
,
}
,
]
,
}
,
]
}
,
}
Regex Path Matching
To match a regex path you can wrap the regex in parenthesis after a parameter, for example
/blog/:slug(\\d{1,})
will match
/blog/123
but not
/blog/abc
:
next.config.js
module
.
exports
=
{
async
headers
() {
return
[
{
source
:
'/blog/:post(\\d{1,})'
,
headers
:
[
{
key
:
'x-post'
,
value
:
':post'
,
}
,
]
,
}
,
]
}
,
}
The following characters
(
,
)
,
{
,
}
,
:
,
*
,
+
,
?
are used for regex path matching, so when used in the
source
as non-special values they must be escaped by adding
\\
before them:
next.config.js
module
.
exports
=
{
async
headers
() {
return
[
{
// this will match `/english(default)/something` being requested
source
:
'/english\\(default\\)/:slug'
,
headers
:
[
{
key
:
'x-header'
,
value
:
'value'
,
}
,
]
,
}
,
]
}
,
}
Header, Cookie, and Query Matching
To only apply a header when header, cookie, or query values also match the
has
field or don't match the
missing
field can be used. Both the
source
and all
has
items must match and all
missing
items must not match for the header to be applied.
has
and
missing
items can have the following fields:
type
:
String
- must be either
header
,
cookie
,
host
, or
query
.
key
:
String
- the key from the selected type to match against.
value
:
String
or
undefined
- the value to check for, if undefined any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the value
first-(?<paramName>.*)
is used for
first-second
then
second
will be usable in the destination with
:paramName
.
next.config.js
module
.
exports
=
{
async
headers
() {
return
[
// if the header `x-add-header` is present,
// the `x-another-header` header will be applied
{
source
:
'/:path*'
,
has
:
[
{
type
:
'header'
,
key
:
'x-add-header'
,
}
,
]
,
headers
:
[
{
key
:
'x-another-header'
,
value
:
'hello'
,
}
,
]
,
}
,
// if the header `x-no-header` is not present,
// the `x-another-header` header will be applied
{
source
:
'/:path*'
,
missing
:
[
{
type
:
'header'
,
key
:
'x-no-header'
,
}
,
]
,
headers
:
[
{
key
:
'x-another-header'
,
value
:
'hello'
,
}
,
]
,
}
,
// if the source, query, and cookie are matched,
// the `x-authorized` header will be applied
{
source
:
'/specific/:path*'
,
has
:
[
{
type
:
'query'
,
key
:
'page'
,
// the page value will not be available in the
// header key/values since value is provided and
// doesn't use a named capture group e.g. (?<page>home)
value
:
'home'
,
}
,
{
type
:
'cookie'
,
key
:
'authorized'
,
value
:
'true'
,
}
,
]
,
headers
:
[
{
key
:
'x-authorized'
,
value
:
':authorized'
,
}
,
]
,
}
,
// if the header `x-authorized` is present and
// contains a matching value, the `x-another-header` will be applied
{
source
:
'/:path*'
,
has
:
[
{
type
:
'header'
,
key
:
'x-authorized'
,
value
:
'(?<authorized>yes|true)'
,
}
,
]
,
headers
:
[
{
key
:
'x-another-header'
,
value
:
':authorized'
,
}
,
]
,
}
,
// if the host is `example.com`,
// this header will be applied
{
source
:
'/:path*'
,
has
:
[
{
type
:
'host'
,
value
:
'example.com'
,
}
,
]
,
headers
:
[
{
key
:
'x-another-header'
,
value
:
':authorized'
,
}
,
]
,
}
,
]
}
,
}
Headers with basePath support
When leveraging
basePath
support
with headers each
source
is automatically prefixed with the
basePath
unless you add
basePath: false
to the header:
next.config.js
module
.
exports
=
{
basePath
:
'/docs'
,
async
headers
() {
return
[
{
source
:
'/with-basePath'
,
// becomes /docs/with-basePath
headers
:
[
{
key
:
'x-hello'
,
value
:
'world'
,
}
,
]
,
}
,
{
source
:
'/without-basePath'
,
// is not modified since basePath: false is set
headers
:
[
{
key
:
'x-hello'
,
value
:
'world'
,
}
,
]
,
basePath
:
false
,
}
,
]
}
,
}
Headers with i18n support
When leveraging
i18n
support
with headers each
source
is automatically prefixed to handle the configured
locales
unless you add
locale: false
to the header. If
locale: false
is used you must prefix the
source
with a locale for it to be matched correctly.
next.config.js
module
.
exports
=
{
i18n
:
{
locales
:
[
'en'
,
'fr'
,
'de'
]
,
defaultLocale
:
'en'
,
}
,
async
headers
() {
return
[
{
source
:
'/with-locale'
,
// automatically handles all locales
headers
:
[
{
key
:
'x-hello'
,
value
:
'world'
,
}
,
]
,
}
,
{
// does not handle locales automatically since locale: false is set
source
:
'/nl/with-locale-manual'
,
locale
:
false
,
headers
:
[
{
key
:
'x-hello'
,
value
:
'world'
,
}
,
]
,
}
,
{
// this matches '/' since `en` is the defaultLocale
source
:
'/en'
,
locale
:
false
,
headers
:
[
{
key
:
'x-hello'
,
value
:
'world'
,
}
,
]
,
}
,
{
// this gets converted to /(en|fr|de)/(.*) so will not match the top-level
// `/` or `/fr` routes like /:path* would
source
:
'/(.*)'
,
headers
:
[
{
key
:
'x-hello'
,
value
:
'world'
,
}
,
]
,
}
,
]
}
,
}
Cache-Control
You cannot set
Cache-Control
headers in
next.config.js
for pages or assets, as these headers will be overwritten in production to ensure that responses and static assets are cached effectively.
If you need to revalidate the cache of a page that has been
statically generated
, you can do so by setting the
revalidate
prop in the page's
getStaticProps
function.
You can set the
Cache-Control
header in your
API Routes
by using the
res.setHeader
method:
pages/api/hello.ts
import
type
{ NextApiRequest
,
NextApiResponse }
from
'next'
type
ResponseData
=
{
message
:
string
}
export
default
function
handler
(
req
:
NextApiRequest
,
res
:
NextApiResponse
<
ResponseData
>
) {
res
.setHeader
(
'Cache-Control'
,
's-maxage=86400'
)
res
.status
(
200
)
.json
({ message
:
'Hello from Next.js!'
})
}
Options
X-DNS-Prefetch-Control
This header
controls DNS prefetching, allowing browsers to proactively perform domain name resolution on external links, images, CSS, JavaScript, and more. This prefetching is performed in the background, so the
DNS
is more likely to be resolved by the time the referenced items are needed. This reduces latency when the user clicks a link.
{
key
:
'X-DNS-Prefetch-Control'
,
value
:
'on'
}
Strict-Transport-Security
This header
informs browsers it should only be accessed using HTTPS, instead of using HTTP. Using the configuration below, all present and future subdomains will use HTTPS for a
max-age
of 2 years. This blocks access to pages or subdomains that can only be served over HTTP.
If you're deploying to
Vercel
, this header is not necessary as it's automatically added to all deployments unless you declare
headers
in your
next.config.js
.
{
key
:
'Strict-Transport-Security'
,
value
:
'max-age=63072000; includeSubDomains; preload'
}
X-Frame-Options
This header
indicates whether the site should be allowed to be displayed within an
iframe
. This can prevent against clickjacking attacks.
This header has been superseded by CSP's
frame-ancestors
option
, which has better support in modern browsers.
{
key
:
'X-Frame-Options'
,
value
:
'SAMEORIGIN'
}
Permissions-Policy
This header
allows you to control which features and APIs can be used in the browser. It was previously named
Feature-Policy
.
{
key
:
'Permissions-Policy'
,
value
:
'camera=(), microphone=(), geolocation=(), browsing-topics=()'
}
X-Content-Type-Options
This header
prevents the browser from attempting to guess the type of content if the
Content-Type
header is not explicitly set. This can prevent XSS exploits for websites that allow users to upload and share files.
For example, a user trying to download an image, but having it treated as a different
Content-Type
like an executable, which could be malicious. This header also applies to downloading browser extensions. The only valid value for this header is
nosniff
.
{
key
:
'X-Content-Type-Options'
,
value
:
'nosniff'
}
Referrer-Policy
This header
controls how much information the browser includes when navigating from the current website (origin) to another.
{
key
:
'Referrer-Policy'
,
value
:
'origin-when-cross-origin'
}
Content-Security-Policy
Learn more about adding a
Content Security Policy
to your application.
Version History
Version
Changes
v13.3.0
missing
added.
v10.2.0
has
added.
v9.5.0
Headers added.
Previous
generateEtags
Next
httpAgentOptions
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.