Data Fetching: Incremental Static Regeneration | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using Pages Router
Features available in /pages
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
On-Demand Revalidation
Using On-Demand Revalidation
Testing on-Demand ISR during development
Error handling and revalidation
Self-hosting ISR
Version History
Edit this page on GitHub
Scroll to top
Pages Router
...
Data Fetching
Incremental Static Regeneration
Incremental Static Regeneration
Examples
Next.js Commerce
GitHub Reactions Demo
Static Tweet Demo
Next.js allows you to create or update static pages
after
you’ve built your site. Incremental Static Regeneration (ISR) enables you to use static-generation on a per-page basis,
without needing to rebuild the entire site
. With ISR, you can retain the benefits of static while scaling to millions of pages.
Good to know
: The
edge
runtime
is currently not compatible with ISR, although you can leverage
stale-while-revalidate
by setting the
cache-control
header manually.
To use ISR, add the
revalidate
prop to
getStaticProps
:
function
Blog
({ posts }) {
return
(
<
ul
>
{
posts
.map
((post)
=>
(
<
li
key
=
{
post
.id}>{
post
.title}</
li
>
))}
</
ul
>
)
}
// This function gets called at build time on server-side.
// It may be called again, on a serverless function, if
// revalidation is enabled and a new request comes in
export
async
function
getStaticProps
() {
const
res
=
await
fetch
(
'https://.../posts'
)
const
posts
=
await
res
.json
()
return
{
props
:
{
posts
,
}
,
// Next.js will attempt to re-generate the page:
// - When a request comes in
// - At most once every 10 seconds
revalidate
:
10
,
// In seconds
}
}
// This function gets called at build time on server-side.
// It may be called again, on a serverless function, if
// the path has not been generated.
export
async
function
getStaticPaths
() {
const
res
=
await
fetch
(
'https://.../posts'
)
const
posts
=
await
res
.json
()
// Get the paths we want to pre-render based on posts
const
paths
=
posts
.map
((post)
=>
({
params
:
{ id
:
post
.id }
,
}))
// We'll pre-render only these paths at build time.
// { fallback: 'blocking' } will server-render pages
// on-demand if the path doesn't exist.
return
{ paths
,
fallback
:
'blocking'
}
}
export
default
Blog
When a request is made to a page that was pre-rendered at build time, it will initially show the cached page.
Any requests to the page after the initial request and before 10 seconds are also cached and instantaneous.
After the 10-second window, the next request will still show the cached (stale) page
Next.js triggers a regeneration of the page in the background.
Once the page generates successfully, Next.js will invalidate the cache and show the updated page. If the background regeneration fails, the old page would still be unaltered.
When a request is made to a path that hasn’t been generated, Next.js will server-render the page on the first request. Future requests will serve the static file from the cache. ISR on Vercel
persists the cache globally and handles rollbacks
.
Good to know
: Check if your upstream data provider has caching enabled by default. You might need to disable (e.g.
useCdn: false
), otherwise a revalidation won't be able to pull fresh data to update the ISR cache. Caching can occur at a CDN (for an endpoint being requested) when it returns the
Cache-Control
header.
On-Demand Revalidation
If you set a
revalidate
time of
60
, all visitors will see the same generated version of your site for one minute. The only way to invalidate the cache is from someone visiting that page after the minute has passed.
Starting with
v12.2.0
, Next.js supports On-Demand Incremental Static Regeneration to manually purge the Next.js cache for a specific page. This makes it easier to update your site when:
Content from your headless CMS is created or updated
Ecommerce metadata changes (price, description, category, reviews, etc.)
Inside
getStaticProps
, you do not need to specify
revalidate
to use on-demand revalidation. If
revalidate
is omitted, Next.js will use the default value of
false
(no revalidation) and only revalidate the page on-demand when
revalidate()
is called.
Good to know
:
Middleware
won't be executed for On-Demand ISR requests. Instead, call
revalidate()
on the
exact
path that you want revalidated. For example, if you have
pages/blog/[slug].js
and a rewrite from
/post-1
->
/blog/post-1
, you would need to call
res.revalidate('/blog/post-1')
.
Using On-Demand Revalidation
First, create a secret token only known by your Next.js app. This secret will be used to prevent unauthorized access to the revalidation API Route. You can access the route (either manually or with a webhook) with the following URL structure:
Terminal
https://<your-site.com>/api/revalidate?secret=<token>
Next, add the secret as an
Environment Variable
to your application. Finally, create the revalidation API Route:
pages/api/revalidate.js
export
default
async
function
handler
(req
,
res) {
// Check for secret to confirm this is a valid request
if
(
req
.
query
.secret
!==
process
.
env
.
MY_SECRET_TOKEN
) {
return
res
.status
(
401
)
.json
({ message
:
'Invalid token'
})
}
try
{
// this should be the actual path not a rewritten path
// e.g. for "/blog/[slug]" this should be "/blog/post-1"
await
res
.revalidate
(
'/path-to-revalidate'
)
return
res
.json
({ revalidated
:
true
})
}
catch
(err) {
// If there was an error, Next.js will continue
// to show the last successfully generated page
return
res
.status
(
500
)
.send
(
'Error revalidating'
)
}
}
View our demo
to see on-demand revalidation in action and provide feedback.
Testing on-Demand ISR during development
When running locally with
next dev
,
getStaticProps
is invoked on every request. To verify your on-demand ISR configuration is correct, you will need to create a
production build
and start the
production server
:
Terminal
$
next
build
$
next
start
Then, you can confirm that static pages have successfully revalidated.
Error handling and revalidation
If there is an error inside
getStaticProps
when handling background regeneration, or you manually throw an error, the last successfully generated page will continue to show. On the next subsequent request, Next.js will retry calling
getStaticProps
.
export
async
function
getStaticProps
() {
// If this request throws an uncaught error, Next.js will
// not invalidate the currently shown page and
// retry getStaticProps on the next request.
const
res
=
await
fetch
(
'https://.../posts'
)
const
posts
=
await
res
.json
()
if
(
!
res
.ok) {
// If there is a server error, you might want to
// throw an error instead of returning so that the cache is not updated
// until the next successful request.
throw
new
Error
(
`Failed to fetch posts, received status
${
res
.status
}
`
)
}
// If the request was successful, return the posts
// and revalidate every 10 seconds.
return
{
props
:
{
posts
,
}
,
revalidate
:
10
,
}
}
Self-hosting ISR
Incremental Static Regeneration (ISR) works on
self-hosted Next.js sites
out of the box when you use
next start
.
You can use this approach when deploying to container orchestrators such as
Kubernetes
or
HashiCorp Nomad
. By default, generated assets will be stored in-memory on each pod. This means that each pod will have its own copy of the static files. Stale data may be shown until that specific pod is hit by a request.
To ensure consistency across all pods, you can disable in-memory caching. This will inform the Next.js server to only leverage assets generated by ISR in the file system.
You can use a shared network mount in your Kubernetes pods (or similar setup) to reuse the same file-system cache between different containers. By sharing the same mount, the
.next
folder which contains the
next/image
cache will also be shared and re-used.
To disable in-memory caching, set
isrMemoryCacheSize
to
0
in your
next.config.js
file:
next.config.js
module
.
exports
=
{
experimental
:
{
// Defaults to 50MB
isrMemoryCacheSize
:
0
,
// cache size in bytes
}
,
}
Good to know
: You might need to consider a race condition between multiple pods trying to update the cache at the same time, depending on how your shared mount is configured.
Version History
Version
Changes
v12.2.0
On-Demand ISR is stable
v12.1.0
On-Demand ISR added (beta).
v12.0.0
Bot-aware ISR fallback
added.
v9.5.0
Base Path added.
Previous
getServerSideProps
Next
Client-side Fetching
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.