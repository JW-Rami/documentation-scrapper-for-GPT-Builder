Configuring: MDX | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using Pages Router
Features available in /pages
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
@next/mdx
Getting Started
Remote MDX
Layouts
Remark and Rehype Plugins
Frontmatter
Custom Elements
Deep Dive: How do you transform markdown into HTML?
Using the Rust-based MDX compiler (Experimental)
Helpful Links
Edit this page on GitHub
Scroll to top
Pages Router
...
Configuring
MDX
Markdown and MDX
Markdown
is a lightweight markup language used to format text. It allows you to write using plain text syntax and convert it to structurally valid HTML. It's commonly used for writing content on websites and blogs.
You write...
I
**love**
using
[
Next.js
]
(https://nextjs.org/)
Output:
<
p
>I <
strong
>love</
strong
> using <
a
href
=
"https://nextjs.org/"
>Next.js</
a
></
p
>
MDX
is a superset of markdown that lets you write
JSX
directly in your markdown files. It is a powerful way to add dynamic interactivity and embed React components within your content.
Next.js can support both local MDX content inside your application, as well as remote MDX files fetched dynamically on the server. The Next.js plugin handles transforming markdown and React components into HTML, including support for usage in Server Components (the default in App Router).
@next/mdx
The
@next/mdx
package is used to configure Next.js so it can process markdown and MDX.
It sources data from local files
, allowing you to create pages with a
.mdx
extension, directly in your
/pages
or
/app
directory.
Let's walk through how to configure and use MDX with Next.js.
Getting Started
Install packages needed to render MDX:
Terminal
npm
install
@next/mdx
@mdx-js/loader
@mdx-js/react
@types/mdx
Update the
next.config.js
file at your project's root to configure it to use MDX:
next.config.js
const
withMDX
=
require
(
'@next/mdx'
)()
/**
@type
{import('next').NextConfig}
*/
const
nextConfig
=
{
// Configure `pageExtensions` to include MDX files
pageExtensions
:
[
'js'
,
'jsx'
,
'mdx'
,
'ts'
,
'tsx'
]
,
// Optionally, add any other Next.js config below
}
module
.
exports
=
withMDX
(nextConfig)
Then, create a new MDX page within the
/pages
directory:
your-project
├── pages
│   └── my-mdx-page.mdx
└── package.json
Now you can use markdown and import React components directly inside your MDX page:
import
{ MyComponent }
from
'my-components'
# Welcome to my
MDX
page
!
This is some
**
bold
**
and _italics_ text.
This is a list
in
markdown
:
-
One
-
Two
-
Three
Checkout my React component
:
<
MyComponent
/>
Navigating to the
/my-mdx-page
route should display your rendered MDX.
Remote MDX
If your markdown or MDX files or content lives
somewhere else
, you can fetch it dynamically on the server. This is useful for content stored in a separate local folder, CMS, database, or anywhere else.
There are two popular community packages for fetching MDX content:
next-mdx-remote
contentlayer
Good to know
: Please proceed with caution. MDX compiles to JavaScript and is executed on the server. You should only fetch MDX content from a trusted source, otherwise this can lead to remote code execution (RCE).
The following example uses
next-mdx-remote
:
pages/my-mdx-page-remote.tsx
import
{ serialize }
from
'next-mdx-remote/serialize'
import
{ MDXRemote
,
MDXRemoteSerializeResult }
from
'next-mdx-remote'
interface
Props
{
mdxSource
:
MDXRemoteSerializeResult
}
export
default
function
RemoteMdxPage
({ mdxSource }
:
Props
) {
return
<
MDXRemote
{
...
mdxSource} />
}
export
async
function
getStaticProps
() {
// MDX text - can be from a local file, database, CMS, fetch, anywhere...
const
res
=
await
fetch
(
'https:...'
)
const
mdxText
=
await
res
.text
()
const
mdxSource
=
await
serialize
(mdxText)
return
{ props
:
{ mdxSource } }
}
Navigating to the
/my-mdx-page-remote
route should display your rendered MDX.
Layouts
To share a layout around MDX pages, create a layout component:
components/mdx-layout.tsx
export
default
function
MdxLayout
({ children }
:
{ children
:
React
.
ReactNode
}) {
// Create any shared layout or styles here
return
<
div
style
=
{{ color
:
'blue'
}}>{children}</
div
>
}
Then, import the layout component into the MDX page, wrap the MDX content in the layout, and export it:
import
MdxLayout
from
'../components/mdx-layout'
# Welcome to my
MDX
page
!
export
default
function
MDXPage
({ children }) {
return
<
MdxLayout
>{children}</
MdxLayout
>;
}
Remark and Rehype Plugins
You can optionally provide
remark
and
rehype
plugins to transform the MDX content.
For example, you can use
remark-gfm
to support GitHub Flavored Markdown.
Since the
remark
and
rehype
ecosystem is ESM only, you'll need to use
next.config.mjs
as the configuration file.
next.config.mjs
import
remarkGfm
from
'remark-gfm'
import
createMDX
from
'@next/mdx'
/**
@type
{import('next').NextConfig}
*/
const
nextConfig
=
{
// Configure `pageExtensions`` to include MDX files
pageExtensions
:
[
'js'
,
'jsx'
,
'mdx'
,
'ts'
,
'tsx'
]
,
// Optionally, add any other Next.js config below
}
const
withMDX
=
createMDX
({
// Add markdown plugins here, as desired
options
:
{
remarkPlugins
:
[remarkGfm]
,
rehypePlugins
:
[]
,
}
,
})
// Merge MDX config with Next.js config
export
default
withMDX
(nextConfig)
Frontmatter
Frontmatter is a YAML like key/value pairing that can be used to store data about a page.
@next/mdx
does
not
support frontmatter by default, though there are many solutions for adding frontmatter to your MDX content, such as:
remark-frontmatter
gray-matter
.
To access page metadata with
@next/mdx
, you can export a metadata object from within the
.mdx
file:
export
const
metadata
=
{
author
:
'John Doe'
,
}
# My
MDX
page
Custom Elements
One of the pleasant aspects of using markdown, is that it maps to native
HTML
elements, making writing fast, and intuitive:
This is a list in markdown:
- One
- Two
- Three
The above generates the following
HTML
:
<
p
>This is a list in markdown:</
p
>
<
ul
>
<
li
>One</
li
>
<
li
>Two</
li
>
<
li
>Three</
li
>
</
ul
>
When you want to style your own elements for a custom feel to your website or application, you can pass in shortcodes. These are your own custom components that map to
HTML
elements.
To do this, create a
mdx-components.tsx
file at the root of your application (the parent folder of
pages/
or
src/
) and add custom elements:
mdx-components.tsx
import
type
{ MDXComponents }
from
'mdx/types'
import
Image
from
'next/image'
// This file allows you to provide custom React components
// to be used in MDX files. You can import and use any
// React component you want, including inline styles,
// components from other libraries, and more.
export
function
useMDXComponents
(components
:
MDXComponents
)
:
MDXComponents
{
return
{
// Allows customizing built-in components, e.g. to add styling.
h1
:
({ children })
=>
<
h1
style
=
{{ fontSize
:
'100px'
}}>{children}</
h1
>
,
img
:
(props)
=>
(
<
Image
sizes
=
"100vw"
style
=
{{ width
:
'100%'
,
height
:
'auto'
}}
{
...
props}
/>
)
,
...
components
,
}
}
Deep Dive: How do you transform markdown into HTML?
React does not natively understand markdown. The markdown plaintext needs to first be transformed into HTML. This can be accomplished with
remark
and
rehype
.
remark
is an ecosystem of tools around markdown.
rehype
is the same, but for HTML. For example, the following code snippet transforms markdown into HTML:
import
{ unified }
from
'unified'
import
remarkParse
from
'remark-parse'
import
remarkRehype
from
'remark-rehype'
import
rehypeSanitize
from
'rehype-sanitize'
import
rehypeStringify
from
'rehype-stringify'
main
()
async
function
main
() {
const
file
=
await
unified
()
.use
(remarkParse)
// Convert into markdown AST
.use
(remarkRehype)
// Transform to HTML AST
.use
(rehypeSanitize)
// Sanitize HTML input
.use
(rehypeStringify)
// Convert AST into serialized HTML
.process
(
'Hello, Next.js!'
)
console
.log
(
String
(file))
// <p>Hello, Next.js!</p>
}
The
remark
and
rehype
ecosystem contains plugins for
syntax highlighting
,
linking headings
,
generating a table of contents
, and more.
When using
@next/mdx
as shown above, you
do not
need to use
remark
or
rehype
directly, as it is handled for you. We're describing it here for a deeper understanding of what the
@next/mdx
package is doing underneath.
Using the Rust-based MDX compiler (Experimental)
Next.js supports a new MDX compiler written in Rust. This compiler is still experimental and is not recommended for production use. To use the new compiler, you need to configure
next.config.js
when you pass it to
withMDX
:
next.config.js
module
.
exports
=
withMDX
({
experimental
:
{
mdxRs
:
true
,
}
,
})
Helpful Links
MDX
@next/mdx
remark
rehype
Previous
src Directory
Next
AMP
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.