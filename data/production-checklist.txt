Deploying: Going to Production | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using Pages Router
Features available in /pages
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
In General
Caching
Reducing JavaScript Size
Logging
Error Handling
Loading Performance
Edit this page on GitHub
Scroll to top
Pages Router
...
Deploying
Going to Production
Going to Production
Before taking your Next.js application to production, here are some recommendations to ensure the best user experience.
In General
Use
caching
wherever possible.
Ensure your database and backend are deployed in the same region.
Aim to ship the least amount of JavaScript possible.
Defer loading heavy JavaScript bundles until needed.
Ensure
logging
is set up.
Ensure
error handling
is set up.
Configure the
404
(Not Found) and
500
(Error) pages.
Ensure you are
measuring performance
.
Run
Lighthouse
to check for performance, best practices, accessibility, and SEO. For best results, use a production build of Next.js and use incognito in your browser so results aren't affected by extensions.
Review
Supported Browsers and Features
.
Improve performance using:
next/image
and Automatic Image Optimization
Automatic Font Optimization
Script Optimization
Improve
loading performance
Consider adding a
Content Security Policy
Caching
Examples
ssr-caching
Caching improves response times and reduces the number of requests to external services. Next.js automatically adds caching headers to immutable assets served from
/_next/static
including JavaScript, CSS, static images, and other media.
Cache-Control: public, max-age=31536000, immutable
Cache-Control
headers set in
next.config.js
will be overwritten in production to ensure that static assets can be cached effectively. If you need to revalidate the cache of a page that has been
statically generated
, you can do so by setting
revalidate
in the page's
getStaticProps
function. If you're using
next/image
, you can configure the
minimumCacheTTL
for the default Image Optimization loader.
Good to know
: When running your application locally with
next dev
, your headers are overwritten to prevent caching locally.
Cache-Control: no-cache, no-store, max-age=0, must-revalidate
You can also use caching headers inside
getServerSideProps
and API Routes for dynamic responses. For example, using
stale-while-revalidate
.
// This value is considered fresh for ten seconds (s-maxage=10).
// If a request is repeated within the next 10 seconds, the previously
// cached value will still be fresh. If the request is repeated before 59 seconds,
// the cached value will be stale but still render (stale-while-revalidate=59).
//
// In the background, a revalidation request will be made to populate the cache
// with a fresh value. If you refresh the page, you will see the new value.
export
async
function
getServerSideProps
({ req
,
res }) {
res
.setHeader
(
'Cache-Control'
,
'public, s-maxage=10, stale-while-revalidate=59'
)
return
{
props
:
{}
,
}
}
By default,
Cache-Control
headers will be set differently depending on how your page fetches data.
If the page uses
getServerSideProps
or
getInitialProps
, it will use the default
Cache-Control
header set by
next start
in order to prevent accidental caching of responses that cannot be cached. If you want a different cache behavior while using
getServerSideProps
, use
res.setHeader('Cache-Control', 'value_you_prefer')
inside of the function as shown above.
If the page is using
getStaticProps
, it will have a
Cache-Control
header of
s-maxage=REVALIDATE_SECONDS, stale-while-revalidate
, or if
revalidate
is
not
used,
s-maxage=31536000, stale-while-revalidate
to cache for the maximum age possible.
Good to know
: Your deployment provider must support caching for dynamic responses. If you are self-hosting, you will need to add this logic yourself using a key/value store like Redis. If you are using Vercel,
Edge Caching works without configuration
.
Reducing JavaScript Size
Examples
with-dynamic-import
To reduce the amount of JavaScript sent to the browser, you can use the following tools to understand what is included inside each JavaScript bundle:
Import Cost
– Display the size of the imported package inside VSCode.
Package Phobia
– Find the cost of adding a new dev dependency to your project.
Bundle Phobia
- Analyze how much a dependency can increase bundle sizes.
Webpack Bundle Analyzer
– Visualize the size of webpack output files with an interactive, zoomable treemap.
bundlejs
- An online tool to quickly bundle & minify your projects, while viewing the compressed gzip/brotli bundle size, all running locally on your browser.
Each file inside your
pages/
directory will automatically be code split into its own JavaScript bundle during
next build
. You can also use
Dynamic Imports
to lazy-load components and libraries. For example, you might want to defer loading your modal code until a user clicks the open button.
Logging
Examples
Pino and Logflare Example
Since Next.js runs on both the client and server, there are multiple forms of logging supported:
console.log
in the browser
stdout
on the server
If you want a structured logging package, we recommend
Pino
. If you're using Vercel, there are
pre-built logging integrations
compatible with Next.js.
Error Handling
Examples
with-sentry
When an unhandled exception occurs, you can control the experience for your users with the
500 page
. We recommend customizing this to your brand instead of the default Next.js theme.
You can also log and track exceptions with a tool like Sentry.
This example
shows how to catch & report errors on both the client and server-side, using the Sentry SDK for Next.js. There's also a
Sentry integration for Vercel
.
Loading Performance
To improve loading performance, you first need to determine what to measure and how to measure it.
Core Web Vitals
is a good industry standard that is measured using your own web browser. If you are not familiar with the metrics of Core Web Vitals, review this
blog post
and determine which specific metric/s will be your drivers for loading performance. Ideally, you would want to measure the loading performance in the following environments:
In the lab, using your own computer or a simulator.
In the field, using real-world data from actual visitors.
Local, using a test that runs on your device.
Remote, using a test that runs in the cloud.
Once you are able to measure the loading performance, use the following strategies to improve it iteratively so that you apply one strategy, measure the new performance and continue tweaking until you do not see much improvement. Then, you can move on to the next strategy.
Use caching regions that are close to the regions where your database or API is deployed.
As described in the
caching
section, use a
stale-while-revalidate
value that will not overload your backend.
Use
Incremental Static Regeneration
to reduce the number of requests to your backend.
Remove unused JavaScript. Review this
blog post
to understand what Core Web Vitals metrics bundle size affects and what strategies you can use to reduce it, such as:
Setting up your Code Editor to view import costs and sizes
Finding alternative smaller packages
Dynamically loading components and dependencies
Previous
Deploying
Next
Static Exports
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.