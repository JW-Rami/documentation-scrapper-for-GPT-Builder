Functions: useSearchParams | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using App Router
Features available in /app
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Parameters
Returns
Behavior
Static Rendering
Dynamic Rendering
Server Components
Pages
Layouts
Examples
Updating searchParams
Version History
Edit this page on GitHub
Scroll to top
App Router
...
Functions
useSearchParams
useSearchParams
useSearchParams
is a
Client Component
hook that lets you read the current URL's
query string
.
useSearchParams
returns a
read-only
version of the
URLSearchParams
interface.
app/dashboard/search-bar.tsx
'use client'
import
{ useSearchParams }
from
'next/navigation'
export
default
function
SearchBar
() {
const
searchParams
=
useSearchParams
()
const
search
=
searchParams
.get
(
'search'
)
// URL -> `/
dashboard
?search=my-project`
// `search` -> 'my-project'
return
<>Search: {search}</>
}
Parameters
const
searchParams
=
useSearchParams
()
useSearchParams
does not take any parameters.
Returns
useSearchParams
returns a
read-only
version of the
URLSearchParams
interface, which includes utility methods for reading the URL's query string:
URLSearchParams.get()
: Returns the first value associated with the search parameter. For example:
URL
searchParams.get("a")
/dashboard?a=1
'1'
/dashboard?a=
''
/dashboard?b=3
null
/dashboard?a=1&a=2
'1'
- use
getAll()
to get all values
URLSearchParams.has()
: Returns a boolean value indicating if the given parameter exists. For example:
URL
searchParams.has("a")
/dashboard?a=1
true
/dashboard?b=3
false
Learn more about other
read-only
methods of
URLSearchParams
, including the
getAll()
,
keys()
,
values()
,
entries()
,
forEach()
, and
toString()
.
Good to know
:
useSearchParams
is a
Client Component
hook and is
not supported
in
Server Components
to prevent stale values during
partial rendering
.
If an application includes the
/pages
directory,
useSearchParams
will return
ReadonlyURLSearchParams | null
. The
null
value is for compatibility during migration since search params cannot be known during pre-rendering of a page that doesn't use
getServerSideProps
Behavior
Static Rendering
If a route is
statically rendered
, calling
useSearchParams()
will cause the tree up to the closest
Suspense
boundary
to be client-side rendered.
This allows a part of the page to be statically rendered while the dynamic part that uses
searchParams
is client-side rendered.
You can reduce the portion of the route that is client-side rendered by wrapping the component that uses
useSearchParams
in a
Suspense
boundary. For example:
app/dashboard/search-bar.tsx
'use client'
import
{ useSearchParams }
from
'next/navigation'
export
default
function
SearchBar
() {
const
searchParams
=
useSearchParams
()
const
search
=
searchParams
.get
(
'search'
)
// This will not be logged on the server when using static rendering
console
.log
(search)
return
<>Search: {search}</>
}
app/dashboard/page.tsx
import
{ Suspense }
from
'react'
import
SearchBar
from
'./search-bar'
// This component passed as a fallback to the Suspense boundary
// will be rendered in place of the search bar in the initial HTML.
// When the value is available during React hydration the fallback
// will be replaced with the `<SearchBar>` component.
function
SearchBarFallback
() {
return
<>placeholder</>
}
export
default
function
Page
() {
return
(
<>
<
nav
>
<
Suspense
fallback
=
{<
SearchBarFallback
/>}>
<
SearchBar
/>
</
Suspense
>
</
nav
>
<
h1
>Dashboard</
h1
>
</>
)
}
Dynamic Rendering
If a route is
dynamically rendered
,
useSearchParams
will be available on the server during the initial server render of the Client Component.
Good to know
: Setting the
dynamic
route segment config option
to
force-dynamic
can be used to force dynamic rendering.
For example:
app/dashboard/search-bar.tsx
'use client'
import
{ useSearchParams }
from
'next/navigation'
export
default
function
SearchBar
() {
const
searchParams
=
useSearchParams
()
const
search
=
searchParams
.get
(
'search'
)
// This will be logged on the server during the initial render
// and on the client on subsequent navigations.
console
.log
(search)
return
<>Search: {search}</>
}
app/dashboard/page.tsx
import
SearchBar
from
'./search-bar'
export
const
dynamic
=
'force-dynamic'
export
default
function
Page
() {
return
(
<>
<
nav
>
<
SearchBar
/>
</
nav
>
<
h1
>Dashboard</
h1
>
</>
)
}
Server Components
Pages
To access search params in
Pages
(Server Components), use the
searchParams
prop.
Layouts
Unlike Pages,
Layouts
(Server Components)
do not
receive the
searchParams
prop. This is because a shared layout is
not re-rendered during navigation
which could lead to stale
searchParams
between navigations. View
detailed explanation
.
Instead, use the Page
searchParams
prop or the
useSearchParams
hook in a Client Component, which is re-rendered on the client with the latest
searchParams
.
Examples
Updating
searchParams
You can use
useRouter
or
Link
to set new
searchParams
. After a navigation is performed, the current
page.js
will receive an updated
searchParams
prop
.
app/example-client-component.tsx
export
default
function
ExampleClientComponent
() {
const
router
=
useRouter
()
const
pathname
=
usePathname
()
const
searchParams
=
useSearchParams
()
!
// Get a new searchParams string by merging the current
// searchParams with a provided key/value pair
const
createQueryString
=
useCallback
(
(name
:
string
,
value
:
string
)
=>
{
const
params
=
new
URLSearchParams
(searchParams)
params
.set
(name
,
value)
return
params
.toString
()
}
,
[searchParams]
)
return
(
<>
<
p
>Sort By</
p
>
{
/* using useRouter */
}
<
button
onClick
=
{()
=>
{
// <pathname>?sort=asc
router
.push
(pathname
+
'?'
+
createQueryString
(
'sort'
,
'asc'
))
}}
>
ASC
</
button
>
{
/* using <Link> */
}
<
Link
href
=
{
// <pathname>?sort=desc
pathname
+
'?'
+
createQueryString
(
'sort'
,
'desc'
)
}
>
DESC
</
Link
>
</>
)
}
Version History
Version
Changes
v13.0.0
useSearchParams
introduced.
Previous
useRouter
Next
useSelectedLayoutSegment
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.