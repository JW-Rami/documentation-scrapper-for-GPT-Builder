Configuring: Draft Mode | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using Pages Router
Features available in /pages
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Step 1: Create and access the API route
Securely accessing it from your Headless CMS
Step 2: Update getStaticProps
Fetch draft data
More Details
Clear the Draft Mode cookie
Works with getServerSideProps
Works with API Routes
Unique per next build
Edit this page on GitHub
Scroll to top
Pages Router
...
Configuring
Draft Mode
Draft Mode
In the
Pages documentation
and the
Data Fetching documentation
, we talked about how to pre-render a page at build time (
Static Generation
) using
getStaticProps
and
getStaticPaths
.
Static Generation is useful when your pages fetch data from a headless CMS. However, it’s not ideal when you’re writing a draft on your headless CMS and want to view the draft immediately on your page. You’d want Next.js to render these pages at
request time
instead of build time and fetch the draft content instead of the published content. You’d want Next.js to bypass Static Generation only for this specific case.
Next.js has a feature called
Draft Mode
which solves this problem. Here are instructions on how to use it.
Step 1: Create and access the API route
Take a look at the
API Routes documentation
first if you’re not familiar with Next.js API Routes.
First, create the
API route
. It can have any name - e.g.
pages/api/draft.ts
In this API route, you need to call
setDraftMode
on the response object.
export
default
function
handler
(req
,
res) {
// ...
res
.setDraftMode
({ enable
:
true
})
// ...
}
This will set a
cookie
to enable draft mode. Subsequent requests containing this cookie will trigger
Draft Mode
changing the behavior for statically generated pages (more on this later).
You can test this manually by creating an API route like below and accessing it from your browser manually:
pages/api/draft.ts
// simple example for testing it manually from your browser.
export
default
function
handler
(req
,
res) {
res
.setDraftMode
({ enable
:
true
})
res
.end
(
'Draft mode is enabled'
)
}
If you open your browser’s developer tools and visit
/api/draft
, you’ll notice a
Set-Cookie
response header with a cookie named
__prerender_bypass
.
Securely accessing it from your Headless CMS
In practice, you’d want to call this API route
securely
from your headless CMS. The specific steps will vary depending on which headless CMS you’re using, but here are some common steps you could take.
These steps assume that the headless CMS you’re using supports setting
custom draft URLs
. If it doesn’t, you can still use this method to secure your draft URLs, but you’ll need to construct and access the draft URL manually.
First
, you should create a
secret token string
using a token generator of your choice. This secret will only be known by your Next.js app and your headless CMS. This secret prevents people who don’t have access to your CMS from accessing draft URLs.
Second
, if your headless CMS supports setting custom draft URLs, specify the following as the draft URL. This assumes that your draft API route is located at
pages/api/draft.ts
.
Terminal
https://<your-site>/api/draft?secret=<token>
&
slug
=<
pat
h
>
<your-site>
should be your deployment domain.
<token>
should be replaced with the secret token you generated.
<path>
should be the path for the page that you want to view. If you want to view
/posts/foo
, then you should use
&slug=/posts/foo
.
Your headless CMS might allow you to include a variable in the draft URL so that
<path>
can be set dynamically based on the CMS’s data like so:
&slug=/posts/{entry.fields.slug}
Finally
, in the draft API route:
Check that the secret matches and that the
slug
parameter exists (if not, the request should fail).
Call
res.setDraftMode
.
Then redirect the browser to the path specified by
slug
. (The following example uses a
307 redirect
).
export
default
async
(req
,
res)
=>
{
// Check the secret and next parameters
// This secret should only be known to this API route and the CMS
if
(
req
.
query
.secret
!==
'MY_SECRET_TOKEN'
||
!
req
.
query
.slug) {
return
res
.status
(
401
)
.json
({ message
:
'Invalid token'
})
}
// Fetch the headless CMS to check if the provided `slug` exists
// getPostBySlug would implement the required fetching logic to the headless CMS
const
post
=
await
getPostBySlug
(
req
.
query
.slug)
// If the slug doesn't exist prevent draft mode from being enabled
if
(
!
post) {
return
res
.status
(
401
)
.json
({ message
:
'Invalid slug'
})
}
// Enable Draft Mode by setting the cookie
res
.setDraftMode
({ enable
:
true
})
// Redirect to the path from the fetched post
// We don't redirect to req.query.slug as that might lead to open redirect vulnerabilities
res
.redirect
(
post
.slug)
}
If it succeeds, then the browser will be redirected to the path you want to view with the draft mode cookie.
Step 2: Update
getStaticProps
The next step is to update
getStaticProps
to support draft mode.
If you request a page which has
getStaticProps
with the cookie set (via
res.setDraftMode
), then
getStaticProps
will be called at
request time
(instead of at build time).
Furthermore, it will be called with a
context
object where
context.draftMode
will be
true
.
export
async
function
getStaticProps
(context) {
if
(
context
.draftMode) {
// dynamic data
}
}
We used
res.setDraftMode
in the draft API route, so
context.draftMode
will be
true
.
If you’re also using
getStaticPaths
, then
context.params
will also be available.
Fetch draft data
You can update
getStaticProps
to fetch different data based on
context.draftMode
.
For example, your headless CMS might have a different API endpoint for draft posts. If so, you can modify the API endpoint URL like below:
export
async
function
getStaticProps
(context) {
const
url
=
context
.draftMode
?
'https://draft.example.com'
:
'https://production.example.com'
const
res
=
await
fetch
(url)
// ...
}
That’s it! If you access the draft API route (with
secret
and
slug
) from your headless CMS or manually, you should now be able to see the draft content. And if you update your draft without publishing, you should be able to view the draft.
Set this as the draft URL on your headless CMS or access manually, and you should be able to see the draft.
Terminal
https://<your-site>/api/draft?secret=<token>
&
slug
=<
pat
h
>
More Details
Clear the Draft Mode cookie
By default, the Draft Mode session ends when the browser is closed.
To clear the Draft Mode cookie manually, create an API route that calls
setDraftMode({ enable: false })
:
pages/api/disable-draft.ts
export
default
function
handler
(req
,
res) {
res
.setDraftMode
({ enable
:
false
})
}
Then, send a request to
/api/disable-draft
to invoke the API Route. If calling this route using
next/link
, you must pass
prefetch={false}
to prevent accidentally deleting the cookie on prefetch.
Works with
getServerSideProps
Draft Mode works with
getServerSideProps
, and is available as a
draftMode
key in the
context
object.
Good to know
: You shouldn't set the
Cache-Control
header when using Draft Mode because it cannot be bypassed. Instead, we recommend using
ISR
.
Works with API Routes
API Routes will have access to
draftMode
on the request object. For example:
export
default
function
myApiRoute
(req
,
res) {
if
(
req
.draftMode) {
// get draft data
}
}
Unique per
next build
A new bypass cookie value will be generated each time you run
next build
.
This ensures that the bypass cookie can’t be guessed.
Good to know
: To test Draft Mode locally over HTTP, your browser will need to allow third-party cookies and local storage access.
Previous
Custom Server
Next
Error Handling
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.