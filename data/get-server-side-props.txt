Functions: getServerSideProps | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using Pages Router
Features available in /pages
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Context parameter
getServerSideProps return values
props
notFound
redirect
Version History
Edit this page on GitHub
Scroll to top
Pages Router
...
Functions
getServerSideProps
getServerSideProps
When exporting a function called
getServerSideProps
(Server-Side Rendering) from a page, Next.js will pre-render this page on each request using the data returned by
getServerSideProps
. This is useful if you want to fetch data that changes often, and have the page update to show the most current data.
pages/index.tsx
import
type
{ InferGetServerSidePropsType
,
GetServerSideProps }
from
'next'
type
Repo
=
{
name
:
string
stargazers_count
:
number
}
export
const
getServerSideProps
=
(
async
()
=>
{
// Fetch data from external API
const
res
=
await
fetch
(
'https://api.github.com/repos/vercel/next.js'
)
const
repo
:
Repo
=
await
res
.json
()
// Pass data to the page via props
return
{ props
:
{ repo } }
})
satisfies
GetServerSideProps
<{ repo
:
Repo
}>
export
default
function
Page
({
repo
,
}
:
InferGetServerSidePropsType
<
typeof
getServerSideProps>) {
return
(
<
main
>
<
p
>{
repo
.stargazers_count}</
p
>
</
main
>
)
}
You can import modules in top-level scope for use in
getServerSideProps
. Imports used will
not be bundled for the client-side
. This means you can write
server-side code directly in
getServerSideProps
, including fetching data from your database.
Context parameter
The
context
parameter is an object containing the following keys:
Name
Description
params
If this page uses a
dynamic route
,
params
contains the route parameters. If the page name is
[id].js
, then
params
will look like
{ id: ... }
.
req
The
HTTP
IncomingMessage object
, with an additional
cookies
prop, which is an object with string keys mapping to string values of cookies.
res
The
HTTP
response object
.
query
An object representing the query string, including dynamic route parameters.
preview
(Deprecated for
draftMode
)
preview
is
true
if the page is in the
Preview Mode
and
false
otherwise.
previewData
(Deprecated for
draftMode
) The
preview
data set by
setPreviewData
.
draftMode
draftMode
is
true
if the page is in the
Draft Mode
and
false
otherwise.
resolvedUrl
A normalized version of the request
URL
that strips the
_next/data
prefix for client transitions and includes original query values.
locale
Contains the active locale (if enabled).
locales
Contains all supported locales (if enabled).
defaultLocale
Contains the configured default locale (if enabled).
getServerSideProps return values
The
getServerSideProps
function should return an object with
any one of the following
properties:
props
The
props
object is a key-value pair, where each value is received by the page component. It should be a
serializable object
so that any props passed, could be serialized with
JSON.stringify
.
export
async
function
getServerSideProps
(context) {
return
{
props
:
{ message
:
`Next.js is awesome`
}
,
// will be passed to the page component as props
}
}
notFound
The
notFound
boolean allows the page to return a
404
status and
404 Page
. With
notFound: true
, the page will return a
404
even if there was a successfully generated page before. This is meant to support use cases like user-generated content getting removed by its author.
export
async
function
getServerSideProps
(context) {
const
res
=
await
fetch
(
`https://.../data`
)
const
data
=
await
res
.json
()
if
(
!
data) {
return
{
notFound
:
true
,
}
}
return
{
props
:
{ data }
,
// will be passed to the page component as props
}
}
redirect
The
redirect
object allows redirecting to internal and external resources. It should match the shape of
{ destination: string, permanent: boolean }
. In some rare cases, you might need to assign a custom status code for older
HTTP
clients to properly redirect. In these cases, you can use the
statusCode
property instead of the
permanent
property, but not both.
export
async
function
getServerSideProps
(context) {
const
res
=
await
fetch
(
`https://.../data`
)
const
data
=
await
res
.json
()
if
(
!
data) {
return
{
redirect
:
{
destination
:
'/'
,
permanent
:
false
,
}
,
}
}
return
{
props
:
{}
,
// will be passed to the page component as props
}
}
Version History
Version
Changes
v13.4.0
App Router
is now stable with simplifed data fetching
v10.0.0
locale
,
locales
,
defaultLocale
, and
notFound
options added.
v9.3.0
getServerSideProps
introduced.
Previous
getInitialProps
Next
getStaticPaths
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.