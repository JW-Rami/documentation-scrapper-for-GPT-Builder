Routing: Dynamic Routes | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using Pages Router
Features available in /pages
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Convention
Example
Catch-all Segments
Optional Catch-all Segments
Next Steps
Edit this page on GitHub
Scroll to top
Pages Router
...
Routing
Dynamic Routes
Dynamic Routes
When you don't know the exact segment names ahead of time and want to create routes from dynamic data, you can use Dynamic Segments that are filled in at request time or
prerendered
at build time.
Convention
A Dynamic Segment can be created by wrapping a file or folder name in square brackets:
[segmentName]
. For example,
[id]
or
[slug]
.
Dynamic Segments can be accessed from
useRouter
.
Example
For example, a blog could include the following route
pages/blog/[slug].js
where
[slug]
is the Dynamic Segment for blog posts.
import
{ useRouter }
from
'next/router'
export
default
function
Page
() {
const
router
=
useRouter
()
return
<
p
>Post: {
router
.
query
.slug}</
p
>
}
Route
Example URL
params
pages/blog/[slug].js
/blog/a
{ slug: 'a' }
pages/blog/[slug].js
/blog/b
{ slug: 'b' }
pages/blog/[slug].js
/blog/c
{ slug: 'c' }
Catch-all Segments
Dynamic Segments can be extended to
catch-all
subsequent segments by adding an ellipsis inside the brackets
[...segmentName]
.
For example,
pages/shop/[...slug].js
will match
/shop/clothes
, but also
/shop/clothes/tops
,
/shop/clothes/tops/t-shirts
, and so on.
Route
Example URL
params
pages/shop/[...slug].js
/shop/a
{ slug: ['a'] }
pages/shop/[...slug].js
/shop/a/b
{ slug: ['a', 'b'] }
pages/shop/[...slug].js
/shop/a/b/c
{ slug: ['a', 'b', 'c'] }
Optional Catch-all Segments
Catch-all Segments can be made
optional
by including the parameter in double square brackets:
[[...segmentName]]
.
For example,
pages/shop/[[...slug]].js
will
also
match
/shop
, in addition to
/shop/clothes
,
/shop/clothes/tops
,
/shop/clothes/tops/t-shirts
.
The difference between
catch-all
and
optional catch-all
segments is that with optional, the route without the parameter is also matched (
/shop
in the example above).
Route
Example URL
params
pages/shop/[[...slug]].js
/shop
{ slug: [] }
pages/shop/[[...slug]].js
/shop/a
{ slug: ['a'] }
pages/shop/[[...slug]].js
/shop/a/b
{ slug: ['a', 'b'] }
pages/shop/[[...slug]].js
/shop/a/b/c
{ slug: ['a', 'b', 'c'] }
Next Steps
For more information on what to do next, we recommend the following sections
Pages Router
...
Routing
Linking and Navigating
Learn how navigation works in Next.js, and how to use the Link Component and `useRouter` hook.
Pages Router
...
Functions
useRouter
Learn more about the API of the Next.js Router, and access the router instance in your page with the useRouter hook.
Previous
Pages and Layouts
Next
Linking and Navigating
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.