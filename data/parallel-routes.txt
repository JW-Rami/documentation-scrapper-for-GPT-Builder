Routing: Parallel Routes | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using App Router
Features available in /app
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Convention
Unmatched Routes
default.js
Navigation
Reload
useSelectedLayoutSegment(s)
Examples
Modals
Dismissing a modal
Conditional Routes
Edit this page on GitHub
Scroll to top
App Router
...
Routing
Parallel Routes
Parallel Routes
Parallel Routing allows you to simultaneously or conditionally render one or more pages in the same layout. For highly dynamic sections of an app, such as dashboards and feeds on social sites, Parallel Routing can be used to implement complex routing patterns.
For example, you can simultaneously render the team and analytics pages.
Parallel Routing allows you to define independent error and loading states for each route as they're being streamed in independently.
Parallel Routing also allows you to conditionally render a slot based on certain conditions, such as authentication state. This enables fully separated code on the same URL.
Convention
Parallel routes are created using named
slots
. Slots are defined with the
@folder
convention, and are passed to the same-level layout as props.
Slots are
not
route segments and
do not affect the URL structure
. The file path
/@team/members
would be accessible at
/members
.
For example, the following file structure defines two explicit slots:
@analytics
and
@team
.
The folder structure above means that the component in
app/layout.js
now accepts the
@analytics
and
@team
slots props, and can render them in parallel alongside the
children
prop:
app/layout.tsx
export
default
function
Layout
(props
:
{
children
:
React
.
ReactNode
analytics
:
React
.
ReactNode
team
:
React
.
ReactNode
}) {
return
(
<>
{
props
.children}
{
props
.team}
{
props
.analytics}
</>
)
}
Good to know
: The
children
prop is an implicit slot that does not need to be mapped to a folder. This means
app/page.js
is equivalent to
app/@children/page.js
.
Unmatched Routes
By default, the content rendered within a slot will match the current URL.
In the case of an unmatched slot, the content that Next.js renders differs based on the routing technique and folder structure.
default.js
You can define a
default.js
file to render as a fallback when Next.js cannot recover a slot's active state based on the current URL.
Consider the following folder structure. The
@team
slot has a
settings
directory, but
@analytics
does not.
Navigation
On navigation, Next.js will render the slot's previously active state, even if it doesn't match the current URL.
Reload
On reload, Next.js will first try to render the unmatched slot's
default.js
file. If that's not available, a 404 gets rendered.
The 404 for unmatched routes helps ensure that you don't accidentally render a route that shouldn't be parallel rendered.
useSelectedLayoutSegment(s)
Both
useSelectedLayoutSegment
and
useSelectedLayoutSegments
accept a
parallelRoutesKey
, which allows you to read the active route segment within that slot.
app/layout.tsx
'use client'
import
{ useSelectedLayoutSegment }
from
'next/navigation'
export
default
async
function
Layout
(props
:
{
//...
auth
:
React
.
ReactNode
}) {
const
loginSegments
=
useSelectedLayoutSegment
(
'auth'
)
// ...
}
When a user navigates to
@auth/login
, or
/login
in the URL bar,
loginSegments
will be equal to the string
"login"
.
Examples
Modals
Parallel Routing can be used to render modals.
The
@auth
slot renders a
<Modal>
component that can be shown by navigating to a matching route, for example
/login
.
app/layout.tsx
export
default
async
function
Layout
(props
:
{
// ...
auth
:
React
.
ReactNode
}) {
return
(
<>
{
/* ... */
}
{
props
.auth}
</>
)
}
app/@auth/login/page.tsx
import
{ Modal }
from
'components/modal'
export
default
function
Login
() {
return
(
<
Modal
>
<
h1
>Login</
h1
>
{
/* ... */
}
</
Modal
>
)
}
To ensure that the contents of the modal don't get rendered when it's not active, you can create a
default.js
file that returns
null
.
app/@auth/default.tsx
export
default
function
Default
() {
return
null
}
Dismissing a modal
If a modal was initiated through client navigation, e.g. by using
<Link href="/login">
, you can dismiss the modal by calling
router.back()
or by using a
Link
component.
app/@auth/login/page.tsx
'use client'
import
{ useRouter }
from
'next/navigation'
import
{ Modal }
from
'components/modal'
export
default
async
function
Login
() {
const
router
=
useRouter
()
return
(
<
Modal
>
<
span
onClick
=
{()
=>
router
.back
()}>Close modal</
span
>
<
h1
>Login</
h1
>
...
</
Modal
>
)
}
More information on modals is covered in the
Intercepting Routes
section.
If you want to navigate elsewhere and dismiss a modal, you can also use a catch-all route.
app/@auth/[...catchAll]/page.tsx
export
default
function
CatchAll
() {
return
null
}
Catch-all routes take precedence over
default.js
.
Conditional Routes
Parallel Routes can be used to implement conditional routing. For example, you can render a
@dashboard
or
@login
route depending on the authentication state.
app/layout.tsx
import
{ getUser }
from
'@/lib/auth'
export
default
function
Layout
({
dashboard
,
login
,
}
:
{
dashboard
:
React
.
ReactNode
login
:
React
.
ReactNode
}) {
const
isLoggedIn
=
getUser
()
return
isLoggedIn
?
dashboard
:
login
}
Previous
Error Handling
Next
Intercepting Routes
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.