File Conventions: Route Segment Config | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using App Router
Features available in /app
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Options
dynamic
dynamicParams
revalidate
Revalidation Frequency
fetchCache
Cross-route segment behavior
runtime
preferredRegion
maxDuration
generateStaticParams
Edit this page on GitHub
Scroll to top
App Router
...
File Conventions
Route Segment Config
Route Segment Config
The Route Segment options allows you configure the behavior of a
Page
,
Layout
, or
Route Handler
by directly exporting the following variables:
Option
Type
Default
dynamic
'auto' | 'force-dynamic' | 'error' | 'force-static'
'auto'
dynamicParams
boolean
true
revalidate
false | 'force-cache' | 0 | number
false
fetchCache
'auto' | 'default-cache' | 'only-cache' | 'force-cache' | 'force-no-store' | 'default-no-store' | 'only-no-store'
'auto'
runtime
'nodejs' | 'edge'
'nodejs'
preferredRegion
'auto' | 'global' | 'home' | string | string[]
'auto'
maxDuration
number
Set by deployment platform
layout.tsx | page.tsx | route.ts
export
const
dynamic
=
'auto'
export
const
dynamicParams
=
true
export
const
revalidate
=
false
export
const
fetchCache
=
'auto'
export
const
runtime
=
'nodejs'
export
const
preferredRegion
=
'auto'
export
const
maxDuration
=
5
export
default
function
MyComponent
() {}
Good to know
:
The values of the config options currently need be statically analyzable. For example
revalidate = 600
is valid, but
revalidate = 60 * 10
is not.
Options
dynamic
Change the dynamic behavior of a layout or page to fully static or fully dynamic.
layout.tsx | page.tsx | route.ts
export
const
dynamic
=
'auto'
// 'auto' | 'force-dynamic' | 'error' | 'force-static'
Good to know
: The new model in the
app
directory favors granular caching control at the
fetch
request level over the binary all-or-nothing model of
getServerSideProps
and
getStaticProps
at the page-level in the
pages
directory. The
dynamic
option is a way to opt back in to the previous model as a convenience and provides a simpler migration path.
'auto'
(default): The default option to cache as much as possible without preventing any components from opting into dynamic behavior.
'force-dynamic'
: Force
dynamic rendering
, which will result in routes being rendered for each user at request time. This option is equivalent to
getServerSideProps()
in the
pages
directory.
'error'
: Force static rendering and cache the data of a layout or page by causing an error if any components use
dynamic functions
or uncached data. This option is equivalent to:
getStaticProps()
in the
pages
directory.
Setting the option of every
fetch()
request in a layout or page to
{ cache: 'force-cache' }
.
Setting the segment config to
fetchCache = 'only-cache', dynamicParams = false
.
dynamic = 'error'
changes the default of
dynamicParams
from
true
to
false
. You can opt back into dynamically rendering pages for dynamic params not generated by
generateStaticParams
by manually setting
dynamicParams = true
.
'force-static'
: Force static rendering and cache the data of a layout or page by forcing
cookies()
,
headers()
and
useSearchParams()
to return empty values.
Good to know
:
Instructions on
how to migrate
from
getServerSideProps
and
getStaticProps
to
dynamic: 'force-dynamic'
and
dynamic: 'error'
can be found in the
upgrade guide
.
dynamicParams
Control what happens when a dynamic segment is visited that was not generated with
generateStaticParams
.
layout.tsx | page.tsx
export
const
dynamicParams
=
true
// true | false,
true
(default): Dynamic segments not included in
generateStaticParams
are generated on demand.
false
: Dynamic segments not included in
generateStaticParams
will return a 404.
Good to know
:
This option replaces the
fallback: true | false | blocking
option of
getStaticPaths
in the
pages
directory.
When
dynamicParams = true
, the segment uses
Streaming Server Rendering
.
If the
dynamic = 'error'
and
dynamic = 'force-static'
are used, it'll change the default of
dynamicParams
to
false
.
revalidate
Set the default revalidation time for a layout or page. This option does not override the
revalidate
value set by individual
fetch
requests.
layout.tsx | page.tsx | route.ts
export
const
revalidate
=
false
// false | 'force-cache' | 0 | number
false
: (default) The default heuristic to cache any
fetch
requests that set their
cache
option to
'force-cache'
or are discovered before a
dynamic function
is used. Semantically equivalent to
revalidate: Infinity
which effectively means the resource should be cached indefinitely. It is still possible for individual
fetch
requests to use
cache: 'no-store'
or
revalidate: 0
to avoid being cached and make the route dynamically rendered. Or set
revalidate
to a positive number lower than the route default to increase the revalidation frequency of a route.
0
: Ensure a layout or page is always
dynamically rendered
even if no dynamic functions or uncached data fetches are discovered. This option changes the default of
fetch
requests that do not set a
cache
option to
'no-store'
but leaves
fetch
requests that opt into
'force-cache'
or use a positive
revalidate
as is.
number
: (in seconds) Set the default revalidation frequency of a layout or page to
n
seconds.
Good to know
: The
revalidate
option is only available when using the
Node.js Runtime
. This means using the
revalidate
option with
runtime = 'edge'
will not work.
Revalidation Frequency
The lowest
revalidate
across each layout and page of a single route will determine the revalidation frequency of the
entire
route. This ensures that child pages are revalidated as frequently as their parent layouts.
Individual
fetch
requests can set a lower
revalidate
than the route's default
revalidate
to increase the revalidation frequency of the entire route. This allows you to dynamically opt-in to more frequent revalidation for certain routes based on some criteria.
fetchCache
This is an advanced option that should only be used if you specifically need to override the default behavior.
By default, Next.js
will cache
any
fetch()
requests that are reachable
before
any
dynamic functions
are used and
will not cache
fetch
requests that are discovered
after
dynamic functions are used.
fetchCache
allows you to override the default
cache
option of all
fetch
requests in a layout or page.
layout.tsx | page.tsx | route.ts
export
const
fetchCache
=
'auto'
// 'auto' | 'default-cache' | 'only-cache'
// 'force-cache' | 'force-no-store' | 'default-no-store' | 'only-no-store'
'auto'
(default)- The default option to cache
fetch
requests before dynamic functions with the
cache
option they provide and not cache
fetch
requests after dynamic functions.
'default-cache'
: Allow any
cache
option to be passed to
fetch
but if no option is provided then set the
cache
option to
'force-cache'
. This means that even
fetch
requests after dynamic functions are considered static.
'only-cache'
: Ensure all
fetch
requests opt into caching by changing the default to
cache: 'force-cache'
if no option is provided and causing an error if any
fetch
requests use
cache: 'no-store'
.
'force-cache'
: Ensure all
fetch
requests opt into caching by setting the
cache
option of all
fetch
requests to
'force-cache'
.
'default-no-store'
: Allow any
cache
option to be passed to
fetch
but if no option is provided then set the
cache
option to
'no-store'
. This means that even
fetch
requests before dynamic functions are considered dynamic.
'only-no-store'
: Ensure all
fetch
requests opt out of caching by changing the default to
cache: 'no-store'
if no option is provided and causing an error if any
fetch
requests use
cache: 'force-cache'
'force-no-store'
: Ensure all
fetch
requests opt out of caching by setting the
cache
option of all
fetch
requests to
'no-store'
. This forces all
fetch
requests to be re-fetched every request even if they provide a
'force-cache'
option.
Cross-route segment behavior
Any options set across each layout and page of a single route need to be compatible with each other.
If both the
'only-cache'
and
'force-cache'
are provided, then
'force-cache'
wins. If both
'only-no-store'
and
'force-no-store'
are provided, then
'force-no-store'
wins. The force option changes the behavior across the route so a single segment with
'force-*'
would prevent any errors caused by
'only-*'
.
The intention of the
'only-*'
and
force-*'
options is to guarantee the whole route is either fully static or fully dynamic. This means:
A combination of
'only-cache'
and
'only-no-store'
in a single route is not allowed.
A combination of
'force-cache'
and
'force-no-store'
in a single route is not allowed.
A parent cannot provide
'default-no-store'
if a child provides
'auto'
or
'*-cache'
since that could make the same fetch have different behavior.
It is generally recommended to leave shared parent layouts as
'auto'
and customize the options where child segments diverge.
runtime
layout.tsx | page.tsx | route.ts
export
const
runtime
=
'nodejs'
// 'edge' | 'nodejs'
nodejs
(default)
edge
Learn more about the
Edge and Node.js runtimes
.
preferredRegion
layout.tsx | page.tsx | route.ts
export
const
preferredRegion
=
'auto'
// 'auto' | 'global' | 'home' | ['iad1', 'sfo1']
Support for
preferredRegion
, and regions supported, is dependent on your deployment platform.
Good to know
:
If a
preferredRegion
is not specified, it will inherit the option of the nearest parent layout.
The root layout defaults to
all
regions.
maxDuration
Based on your deployment platform, you may be able to use a higher default execution time for your function.
This setting allows you to opt into a higher execution time within your plans limit.
Note
: This settings requires Next.js
13.4.10
or higher.
layout.tsx | page.tsx | route.ts
export
const
maxDuration
=
5
Good to know
:
If a
maxDuration
is not specified, the default value is dependent on your deployment platform and plan.
generateStaticParams
The
generateStaticParams
function can be used in combination with
dynamic route segments
to define the list of route segment parameters that will be statically generated at build time instead of on-demand at request time.
See the
API reference
for more details.
Previous
route.js
Next
template.js
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.