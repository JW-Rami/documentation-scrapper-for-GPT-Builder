Routing: Custom Document | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using Pages Router
Features available in /pages
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Caveats
Customizing renderPage
Edit this page on GitHub
Scroll to top
Pages Router
...
Routing
Custom Document
Custom Document
A custom
Document
can update the
<html>
and
<body>
tags used to render a
Page
.
To override the default
Document
, create the file
pages/_document
as shown below:
pages/_document.tsx
import
{ Html
,
Head
,
Main
,
NextScript }
from
'next/document'
export
default
function
Document
() {
return
(
<
Html
lang
=
"en"
>
<
Head
/>
<
body
>
<
Main
/>
<
NextScript
/>
</
body
>
</
Html
>
)
}
Good to know
_document
is only rendered on the server, so event handlers like
onClick
cannot be used in this file.
<Html>
,
<Head />
,
<Main />
and
<NextScript />
are required for the page to be properly rendered.
Caveats
The
<Head />
component used in
_document
is not the same as
next/head
. The
<Head />
component used here should only be used for any
<head>
code that is common for all pages. For all other cases, such as
<title>
tags, we recommend using
next/head
in your pages or components.
React components outside of
<Main />
will not be initialized by the browser. Do
not
add application logic here or custom CSS (like
styled-jsx
). If you need shared components in all your pages (like a menu or a toolbar), read
Layouts
instead.
Document
currently does not support Next.js
Data Fetching methods
like
getStaticProps
or
getServerSideProps
.
Customizing
renderPage
Customizing
renderPage
is advanced and only needed for libraries like CSS-in-JS to support server-side rendering. This is not needed for built-in
styled-jsx
support.
We do not recommend using this pattern.
Instead, consider
incrementally adopting
the App Router, which allows you to more easily fetch data for
pages and layouts
.
pages/_document.tsx
import
Document
,
{
Html
,
Head
,
Main
,
NextScript
,
DocumentContext
,
DocumentInitialProps
,
}
from
'next/document'
class
MyDocument
extends
Document
{
static
async
getInitialProps
(
ctx
:
DocumentContext
)
:
Promise
<
DocumentInitialProps
> {
const
originalRenderPage
=
ctx
.renderPage
// Run the React rendering logic synchronously
ctx
.
renderPage
=
()
=>
originalRenderPage
({
// Useful for wrapping the whole react tree
enhanceApp
:
(App)
=>
App
,
// Useful for wrapping in a per-page basis
enhanceComponent
:
(Component)
=>
Component
,
})
// Run the parent `getInitialProps`, it now includes the custom `renderPage`
const
initialProps
=
await
Document
.getInitialProps
(ctx)
return
initialProps
}
render
() {
return
(
<
Html
lang
=
"en"
>
<
Head
/>
<
body
>
<
Main
/>
<
NextScript
/>
</
body
>
</
Html
>
)
}
}
export
default
MyDocument
Good to know
getInitialProps
in
_document
is not called during client-side transitions.
The
ctx
object for
_document
is equivalent to the one received in
getInitialProps
, with the addition of
renderPage
.
Previous
Custom App
Next
Custom Errors
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.