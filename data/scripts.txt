Optimizing: Scripts | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using Pages Router
Features available in /pages
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Application Scripts
Strategy
Offloading Scripts To A Web Worker (Experimental)
Inline Scripts
Executing Additional Code
Additional Attributes
Edit this page on GitHub
Scroll to top
Pages Router
...
Optimizing
Scripts
Script Optimization
Application Scripts
To load a third-party script for all routes, import
next/script
and include the script directly in your custom
_app
:
pages/_app.js
import
Script
from
'next/script'
export
default
function
MyApp
({ Component
,
pageProps }) {
return
(
<>
<
Component
{
...
pageProps} />
<
Script
src
=
"https://example.com/script.js"
/>
</>
)
}
This script will load and execute when
any
route in your application is accessed. Next.js will ensure the script will
only load once
, even if a user navigates between multiple pages.
Recommendation
: We recommend only including third-party scripts in specific pages or layouts in order to minimize any unnecessary impact to performance.
Strategy
Although the default behavior of
next/script
allows you to load third-party scripts in any page or layout, you can fine-tune its loading behavior by using the
strategy
property:
beforeInteractive
: Load the script before any Next.js code and before any page hydration occurs.
afterInteractive
: (
default
) Load the script early but after some hydration on the page occurs.
lazyOnload
: Load the script later during browser idle time.
worker
: (experimental) Load the script in a web worker.
Refer to the
next/script
API reference documentation to learn more about each strategy and their use cases.
Offloading Scripts To A Web Worker (Experimental)
Warning:
The
worker
strategy is not yet stable and does not yet work with the
app
directory. Use with caution.
Scripts that use the
worker
strategy are offloaded and executed in a web worker with
Partytown
. This can improve the performance of your site by dedicating the main thread to the rest of your application code.
This strategy is still experimental and can only be used if the
nextScriptWorkers
flag is enabled in
next.config.js
:
next.config.js
module
.
exports
=
{
experimental
:
{
nextScriptWorkers
:
true
,
}
,
}
Then, run
next
(normally
npm run dev
or
yarn dev
) and Next.js will guide you through the installation of the required packages to finish the setup:
Terminal
npm
run
dev
You'll see instructions like these: Please install Partytown by running
npm install @builder.io/partytown
Once setup is complete, defining
strategy="worker"
will automatically instantiate Partytown in your application and offload the script to a web worker.
pages/home.tsx
import
Script
from
'next/script'
export
default
function
Home
() {
return
(
<>
<
Script
src
=
"https://example.com/script.js"
strategy
=
"worker"
/>
</>
)
}
There are a number of trade-offs that need to be considered when loading a third-party script in a web worker. Please see Partytown's
tradeoffs
documentation for more information.
Inline Scripts
Inline scripts, or scripts not loaded from an external file, are also supported by the Script component. They can be written by placing the JavaScript within curly braces:
<
Script
id
=
"show-banner"
>
{
`document.getElementById('banner').classList.remove('hidden')`
}
</
Script
>
Or by using the
dangerouslySetInnerHTML
property:
<
Script
id
=
"show-banner"
dangerouslySetInnerHTML
=
{{
__html
:
`document.getElementById('banner').classList.remove('hidden')`
,
}}
/>
Warning
: An
id
property must be assigned for inline scripts in order for Next.js to track and optimize the script.
Executing Additional Code
Event handlers can be used with the Script component to execute additional code after a certain event occurs:
onLoad
: Execute code after the script has finished loading.
onReady
: Execute code after the script has finished loading and every time the component is mounted.
onError
: Execute code if the script fails to load.
These handlers will only work when
next/script
is imported and used inside of a
Client Component
where
"use client"
is defined as the first line of code:
pages/index.tsx
import
Script
from
'next/script'
export
default
function
Page
() {
return
(
<>
<
Script
src
=
"https://example.com/script.js"
onLoad
=
{()
=>
{
console
.log
(
'Script has loaded'
)
}}
/>
</>
)
}
Refer to the
next/script
API reference to learn more about each event handler and view examples.
Additional Attributes
There are many DOM attributes that can be assigned to a
<script>
element that are not used by the Script component, like
nonce
or
custom data attributes
. Including any additional attributes will automatically forward it to the final, optimized
<script>
element that is included in the HTML.
pages/index.tsx
import
Script
from
'next/script'
export
default
function
Page
() {
return
(
<>
<
Script
src
=
"https://example.com/script.js"
id
=
"example-script"
nonce
=
"XUENAJFW"
data-test
=
"script"
/>
</>
)
}
Previous
Fonts
Next
Static Assets
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.