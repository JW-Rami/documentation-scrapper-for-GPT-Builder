Routing: Middleware | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using Pages Router
Features available in /pages
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Convention
Example
Matching Paths
Matcher
Conditional Statements
NextResponse
Using Cookies
Setting Headers
Producing a Response
waitUntil and NextFetchEvent
Advanced Middleware Flags
Runtime
Version History
Edit this page on GitHub
Scroll to top
Pages Router
...
Routing
Middleware
Middleware
Middleware allows you to run code before a request is completed. Then, based on the incoming request, you can modify the response by rewriting, redirecting, modifying the request or response headers, or responding directly.
Middleware runs before cached content and routes are matched. See
Matching Paths
for more details.
Convention
Use the file
middleware.ts
(or
.js
) in the root of your project to define Middleware. For example, at the same level as
pages
or
app
, or inside
src
if applicable.
Example
middleware.ts
import
{ NextResponse }
from
'next/server'
import
type
{ NextRequest }
from
'next/server'
// This function can be marked `async` if using `await` inside
export
function
middleware
(request
:
NextRequest
) {
return
NextResponse
.redirect
(
new
URL
(
'/home'
,
request
.url))
}
// See "Matching Paths" below to learn more
export
const
config
=
{
matcher
:
'/about/:path*'
,
}
Matching Paths
Middleware will be invoked for
every route in your project
. The following is the execution order:
headers
from
next.config.js
redirects
from
next.config.js
Middleware (
rewrites
,
redirects
, etc.)
beforeFiles
(
rewrites
) from
next.config.js
Filesystem routes (
public/
,
_next/static/
,
pages/
,
app/
, etc.)
afterFiles
(
rewrites
) from
next.config.js
Dynamic Routes (
/blog/[slug]
)
fallback
(
rewrites
) from
next.config.js
There are two ways to define which paths Middleware will run on:
Custom matcher config
Conditional statements
Matcher
matcher
allows you to filter Middleware to run on specific paths.
middleware.js
export
const
config
=
{
matcher
:
'/about/:path*'
,
}
You can match a single path or multiple paths with an array syntax:
middleware.js
export
const
config
=
{
matcher
:
[
'/about/:path*'
,
'/dashboard/:path*'
]
,
}
The
matcher
config allows full regex so matching like negative lookaheads or character matching is supported. An example of a negative lookahead to match all except specific paths can be seen here:
middleware.js
export
const
config
=
{
matcher
:
[
/*
* Match all request paths except for the ones starting with:
* - api (API routes)
* - _next/static (static files)
* - _next/image (image optimization files)
* - favicon.ico (favicon file)
*/
'/((?!api|_next/static|_next/image|favicon.ico).*)'
,
]
,
}
Good to know
: The
matcher
values need to be constants so they can be statically analyzed at build-time. Dynamic values such as variables will be ignored.
Configured matchers:
MUST start with
/
Can include named parameters:
/about/:path
matches
/about/a
and
/about/b
but not
/about/a/c
Can have modifiers on named parameters (starting with
:
):
/about/:path*
matches
/about/a/b/c
because
*
is
zero or more
.
?
is
zero or one
and
+
one or more
Can use regular expression enclosed in parenthesis:
/about/(.*)
is the same as
/about/:path*
Read more details on
path-to-regexp
documentation.
Good to know
: For backward compatibility, Next.js always considers
/public
as
/public/index
. Therefore, a matcher of
/public/:path
will match.
Conditional Statements
middleware.ts
import
{ NextResponse }
from
'next/server'
import
type
{ NextRequest }
from
'next/server'
export
function
middleware
(request
:
NextRequest
) {
if
(
request
.
nextUrl
.
pathname
.startsWith
(
'/about'
)) {
return
NextResponse
.rewrite
(
new
URL
(
'/about-2'
,
request
.url))
}
if
(
request
.
nextUrl
.
pathname
.startsWith
(
'/dashboard'
)) {
return
NextResponse
.rewrite
(
new
URL
(
'/dashboard/user'
,
request
.url))
}
}
NextResponse
The
NextResponse
API allows you to:
redirect
the incoming request to a different URL
rewrite
the response by displaying a given URL
Set request headers for API Routes,
getServerSideProps
, and
rewrite
destinations
Set response cookies
Set response headers
To produce a response from Middleware, you can:
rewrite
to a route (
Page
or
Edge API Route
) that produces a response
return a
NextResponse
directly. See
Producing a Response
Using Cookies
Cookies are regular headers. On a
Request
, they are stored in the
Cookie
header. On a
Response
they are in the
Set-Cookie
header. Next.js provides a convenient way to access and manipulate these cookies through the
cookies
extension on
NextRequest
and
NextResponse
.
For incoming requests,
cookies
comes with the following methods:
get
,
getAll
,
set
, and
delete
cookies. You can check for the existence of a cookie with
has
or remove all cookies with
clear
.
For outgoing responses,
cookies
have the following methods
get
,
getAll
,
set
, and
delete
.
middleware.ts
import
{ NextResponse }
from
'next/server'
import
type
{ NextRequest }
from
'next/server'
export
function
middleware
(request
:
NextRequest
) {
// Assume a "Cookie:nextjs=fast" header to be present on the incoming request
// Getting cookies from the request using the `RequestCookies` API
let
cookie
=
request
.
cookies
.get
(
'nextjs'
)
console
.log
(cookie)
// => { name: 'nextjs', value: 'fast', Path: '/' }
const
allCookies
=
request
.
cookies
.getAll
()
console
.log
(allCookies)
// => [{ name: 'nextjs', value: 'fast' }]
request
.
cookies
.has
(
'nextjs'
)
// => true
request
.
cookies
.delete
(
'nextjs'
)
request
.
cookies
.has
(
'nextjs'
)
// => false
// Setting cookies on the response using the `ResponseCookies` API
const
response
=
NextResponse
.next
()
response
.
cookies
.set
(
'vercel'
,
'fast'
)
response
.
cookies
.set
({
name
:
'vercel'
,
value
:
'fast'
,
path
:
'/'
,
})
cookie
=
response
.
cookies
.get
(
'vercel'
)
console
.log
(cookie)
// => { name: 'vercel', value: 'fast', Path: '/' }
// The outgoing response will have a `Set-Cookie:vercel=fast;path=/test` header.
return
response
}
Setting Headers
You can set request and response headers using the
NextResponse
API (setting
request
headers is available since Next.js v13.0.0).
middleware.ts
import
{ NextResponse }
from
'next/server'
import
type
{ NextRequest }
from
'next/server'
export
function
middleware
(request
:
NextRequest
) {
// Clone the request headers and set a new header `x-hello-from-middleware1`
const
requestHeaders
=
new
Headers
(
request
.headers)
requestHeaders
.set
(
'x-hello-from-middleware1'
,
'hello'
)
// You can also set request headers in NextResponse.rewrite
const
response
=
NextResponse
.next
({
request
:
{
// New request headers
headers
:
requestHeaders
,
}
,
})
// Set a new response header `x-hello-from-middleware2`
response
.
headers
.set
(
'x-hello-from-middleware2'
,
'hello'
)
return
response
}
Good to know
: Avoid setting large headers as it might cause
431 Request Header Fields Too Large
error depending on your backend web server configuration.
Producing a Response
You can respond from Middleware directly by returning a
Response
or
NextResponse
instance. (This is available since
Next.js v13.1.0
)
middleware.ts
import
{ NextRequest }
from
'next/server'
import
{ isAuthenticated }
from
'@lib/auth'
// Limit the middleware to paths starting with `/api/`
export
const
config
=
{
matcher
:
'/api/:function*'
,
}
export
function
middleware
(request
:
NextRequest
) {
// Call our authentication function to check the request
if
(
!
isAuthenticated
(request)) {
// Respond with JSON indicating an error message
return
Response
.json
(
{ success
:
false
,
message
:
'authentication failed'
}
,
{ status
:
401
}
)
}
}
waitUntil
and
NextFetchEvent
The
NextFetchEvent
object extends the native
FetchEvent
object, and includes the
waitUntil()
method.
The
waitUntil()
method takes a promise as an argument, and extends the lifetime of the Middleware until the promise settles. This is useful for performing work in the background.
middleware.ts
import
{ NextResponse }
from
'next/server'
import
type
{ NextFetchEvent
,
NextRequest }
from
'next/server'
export
function
middleware
(req
:
NextRequest
,
event
:
NextFetchEvent
) {
event
.waitUntil
(
fetch
(
'https://my-analytics-platform.com'
,
{
method
:
'POST'
,
body
:
JSON
.stringify
({ pathname
:
req
.
nextUrl
.pathname })
,
})
)
return
NextResponse
.next
()
}
Advanced Middleware Flags
In
v13.1
of Next.js two additional flags were introduced for middleware,
skipMiddlewareUrlNormalize
and
skipTrailingSlashRedirect
to handle advanced use cases.
skipTrailingSlashRedirect
allows disabling Next.js default redirects for adding or removing trailing slashes allowing custom handling inside middleware which can allow maintaining the trailing slash for some paths but not others allowing easier incremental migrations.
next.config.js
module
.
exports
=
{
skipTrailingSlashRedirect
:
true
,
}
middleware.js
const
legacyPrefixes
=
[
'/docs'
,
'/blog'
]
export
default
async
function
middleware
(req) {
const
{
pathname
}
=
req
.nextUrl
if
(
legacyPrefixes
.some
((prefix)
=>
pathname
.startsWith
(prefix))) {
return
NextResponse
.next
()
}
// apply trailing slash handling
if
(
!
pathname
.endsWith
(
'/'
)
&&
!
pathname
.match
(
/((?!\.well-known(?:\/.
*
)
?
)(?:[
^
/]
+
\/)
*
[
^
/]
+
\.\w
+
)/
)
) {
req
.
nextUrl
.pathname
+=
'/'
return
NextResponse
.redirect
(
req
.nextUrl)
}
}
skipMiddlewareUrlNormalize
allows disabling the URL normalizing Next.js does to make handling direct visits and client-transitions the same. There are some advanced cases where you need full control using the original URL which this unlocks.
next.config.js
module
.
exports
=
{
skipMiddlewareUrlNormalize
:
true
,
}
middleware.js
export
default
async
function
middleware
(req) {
const
{
pathname
}
=
req
.nextUrl
// GET /_next/data/build-id/hello.json
console
.log
(pathname)
// with the flag this now /_next/data/build-id/hello.json
// without the flag this would be normalized to /hello
}
Runtime
Middleware currently only supports the
Edge runtime
. The Node.js runtime can not be used.
Version History
Version
Changes
v13.1.0
Advanced Middleware flags added
v13.0.0
Middleware can modify request headers, response headers, and send responses
v12.2.0
Middleware is stable, please see the
upgrade guide
v12.0.9
Enforce absolute URLs in Edge Runtime (
PR
)
v12.0.0
Middleware (Beta) added
Previous
Authenticating
Next
Rendering
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.