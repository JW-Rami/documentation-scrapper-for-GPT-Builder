Upgrading: Version 11 | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using Pages Router
Features available in /pages
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Webpack 5
Cleaning the distDir is now a default
PORT is now supported for next dev and next start
next.config.js customization to import images
Remove super.componentDidCatch() from pages/_app.js
Remove Container from pages/_app.js
Remove props.url usage from page components
Remove unsized property on next/image
Remove modules property on next/dynamic
Remove Head.rewind
Moment.js locales excluded by default
Update usage of router.events
React 16 to 17
Edit this page on GitHub
Scroll to top
Pages Router
...
Upgrading
Version 11
Version 11
To upgrade to version 11, run the following command:
Terminal
npm
i
next@
11
react@
17
react-dom@
17
Terminal
yarn
add
next@
11
react@
17
react-dom@
17
Terminal
pnpm
up
next@
11
react@
17
react-dom@
17
Terminal
bun
add
next@
11
react@
17
react-dom@
17
Good to know:
If you are using TypeScript, ensure you also upgrade
@types/react
and
@types/react-dom
to their corresponding versions.
Webpack 5
Webpack 5 is now the default for all Next.js applications. If you did not have a custom webpack configuration, your application is already using webpack 5. If you do have a custom webpack configuration, you can refer to the
Next.js webpack 5 documentation
for upgrade guidance.
Cleaning the
distDir
is now a default
The build output directory (defaults to
.next
) is now cleared by default except for the Next.js caches. You can refer to
the cleaning
distDir
RFC
for more information.
If your application was relying on this behavior previously you can disable the new default behavior by adding the
cleanDistDir: false
flag in
next.config.js
.
PORT
is now supported for
next dev
and
next start
Next.js 11 supports the
PORT
environment variable to set the port the application runs on. Using
-p
/
--port
is still recommended but if you were prohibited from using
-p
in any way you can now use
PORT
as an alternative:
Example:
PORT=4000 next start
next.config.js
customization to import images
Next.js 11 supports static image imports with
next/image
. This new feature relies on being able to process image imports. If you previously added the
next-images
or
next-optimized-images
packages you can either move to the new built-in support using
next/image
or disable the feature:
next.config.js
module
.
exports
=
{
images
:
{
disableStaticImages
:
true
,
}
,
}
Remove
super.componentDidCatch()
from
pages/_app.js
The
next/app
component's
componentDidCatch
was deprecated in Next.js 9 as it's no longer needed and has since been a no-op. In Next.js 11, it was removed.
If your
pages/_app.js
has a custom
componentDidCatch
method you can remove
super.componentDidCatch
as it is no longer needed.
Remove
Container
from
pages/_app.js
This export was deprecated in Next.js 9 as it's no longer needed and has since been a no-op with a warning during development. In Next.js 11 it was removed.
If your
pages/_app.js
imports
Container
from
next/app
you can remove
Container
as it was removed. Learn more in
the documentation
.
Remove
props.url
usage from page components
This property was deprecated in Next.js 4 and has since shown a warning during development. With the introduction of
getStaticProps
/
getServerSideProps
these methods already disallowed the usage of
props.url
. In Next.js 11, it was removed completely.
You can learn more in
the documentation
.
Remove
unsized
property on
next/image
The
unsized
property on
next/image
was deprecated in Next.js 10.0.1. You can use
layout="fill"
instead. In Next.js 11
unsized
was removed.
Remove
modules
property on
next/dynamic
The
modules
and
render
option for
next/dynamic
were deprecated in Next.js 9.5. This was done in order to make the
next/dynamic
API closer to
React.lazy
. In Next.js 11, the
modules
and
render
options were removed.
This option hasn't been mentioned in the documentation since Next.js 8 so it's less likely that your application is using it.
If your application does use
modules
and
render
you can refer to
the documentation
.
Remove
Head.rewind
Head.rewind
has been a no-op since Next.js 9.5, in Next.js 11 it was removed. You can safely remove your usage of
Head.rewind
.
Moment.js locales excluded by default
Moment.js includes translations for a lot of locales by default. Next.js now automatically excludes these locales by default to optimize bundle size for applications using Moment.js.
To load a specific locale use this snippet:
import
moment
from
'moment'
import
'moment/locale/ja'
moment
.locale
(
'ja'
)
You can opt-out of this new default by adding
excludeDefaultMomentLocales: false
to
next.config.js
if you do not want the new behavior, do note it's highly recommended to not disable this new optimization as it significantly reduces the size of Moment.js.
Update usage of
router.events
In case you're accessing
router.events
during rendering, in Next.js 11
router.events
is no longer provided during pre-rendering. Ensure you're accessing
router.events
in
useEffect
:
useEffect
(()
=>
{
const
handleRouteChange
=
(url
,
{ shallow })
=>
{
console
.log
(
`App is changing to
${
url
}
${
shallow
?
'with'
:
'without'
}
shallow routing`
)
}
router
.
events
.on
(
'routeChangeStart'
,
handleRouteChange)
// If the component is unmounted, unsubscribe
// from the event with the `off` method:
return
()
=>
{
router
.
events
.off
(
'routeChangeStart'
,
handleRouteChange)
}
}
,
[router])
If your application uses
router.router.events
which was an internal property that was not public please make sure to use
router.events
as well.
React 16 to 17
React 17 introduced a new
JSX Transform
that brings a long-time Next.js feature to the wider React ecosystem: Not having to
import React from 'react'
when using JSX. When using React 17 Next.js will automatically use the new transform. This transform does not make the
React
variable global, which was an unintended side-effect of the previous Next.js implementation. A
codemod is available
to automatically fix cases where you accidentally used
React
without importing it.
Most applications already use the latest version of React, with Next.js 11 the minimum React version has been updated to 17.0.2.
To upgrade you can run the following command:
npm install react@latest react-dom@latest
Or using
yarn
:
yarn add react@latest react-dom@latest
Previous
Version 12
Next
Version 10
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.