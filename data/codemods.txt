Upgrading: Codemods | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using Pages Router
Features available in /pages
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Usage
Next.js Codemods
14.0
Migrate ImageResponse imports
next-og-import
Use viewport export
metadata-to-viewport-export
13.2
Use Built-in Font
built-in-next-font
13.0
Rename Next Image Imports
next-image-to-legacy-image
Migrate to the New Image Component
next-image-experimental
Remove <a> Tags From Link Components
new-link
11
Migrate from CRA
cra-to-next
10
Add React imports
add-missing-react-import
9
Transform Anonymous Components into Named Components
name-default-component
8
Transform AMP HOC into page config
withamp-to-config
6
Use withRouter
url-to-withrouter
Edit this page on GitHub
Scroll to top
Pages Router
...
Upgrading
Codemods
Codemods
Codemods are transformations that run on your codebase programmatically. This allows a large number of changes to be programmatically applied without having to manually go through every file.
Next.js provides Codemod transformations to help upgrade your Next.js codebase when an API is updated or deprecated.
Usage
In your terminal, navigate (
cd
) into your project's folder, then run:
Terminal
npx
@next/codemod
<
transfor
m
>
<
pat
h
>
Replacing
<transform>
and
<path>
with appropriate values.
transform
- name of transform
path
- files or directory to transform
--dry
Do a dry-run, no code will be edited
--print
Prints the changed output for comparison
Next.js Codemods
14.0
Migrate
ImageResponse
imports
next-og-import
Terminal
npx
@next/codemod@latest
next-og-import
.
This codemod moves transforms imports from
next/server
to
next/og
for usage of
Dynamic OG Image Generation
.
For example:
import
{ ImageResponse }
from
'next/server'
Transforms into:
import
{ ImageResponse }
from
'next/og'
Use
viewport
export
metadata-to-viewport-export
Terminal
npx
@next/codemod@latest
metadata-to-viewport-export
.
This codemod migrates certain viewport metadata to
viewport
export.
For example:
export
const
metadata
=
{
title
:
'My App'
,
themeColor
:
'dark'
,
viewport
:
{
width
:
1
,
}
,
}
Transforms into:
export
const
metadata
=
{
title
:
'My App'
,
}
export
const
viewport
=
{
width
:
1
,
themeColor
:
'dark'
,
}
13.2
Use Built-in Font
built-in-next-font
Terminal
npx
@next/codemod@latest
built-in-next-font
.
This codemod uninstalls the
@next/font
package and transforms
@next/font
imports into the built-in
next/font
.
For example:
import
{ Inter }
from
'@next/font/google'
Transforms into:
import
{ Inter }
from
'next/font/google'
13.0
Rename Next Image Imports
next-image-to-legacy-image
Terminal
npx
@next/codemod@latest
next-image-to-legacy-image
.
Safely renames
next/image
imports in existing Next.js 10, 11, or 12 applications to
next/legacy/image
in Next.js 13. Also renames
next/future/image
to
next/image
.
For example:
pages/index.js
import
Image1
from
'next/image'
import
Image2
from
'next/future/image'
export
default
function
Home
() {
return
(
<
div
>
<
Image1
src
=
"/test.jpg"
width
=
"200"
height
=
"300"
/>
<
Image2
src
=
"/test.png"
width
=
"500"
height
=
"400"
/>
</
div
>
)
}
Transforms into:
pages/index.js
// 'next/image' becomes 'next/legacy/image'
import
Image1
from
'next/legacy/image'
// 'next/future/image' becomes 'next/image'
import
Image2
from
'next/image'
export
default
function
Home
() {
return
(
<
div
>
<
Image1
src
=
"/test.jpg"
width
=
"200"
height
=
"300"
/>
<
Image2
src
=
"/test.png"
width
=
"500"
height
=
"400"
/>
</
div
>
)
}
Migrate to the New Image Component
next-image-experimental
Terminal
npx
@next/codemod@latest
next-image-experimental
.
Dangerously migrates from
next/legacy/image
to the new
next/image
by adding inline styles and removing unused props.
Removes
layout
prop and adds
style
.
Removes
objectFit
prop and adds
style
.
Removes
objectPosition
prop and adds
style
.
Removes
lazyBoundary
prop.
Removes
lazyRoot
prop.
Remove
<a>
Tags From Link Components
new-link
Terminal
npx
@next/codemod@latest
new-link
.
Remove
<a>
tags inside
Link Components
, or add a
legacyBehavior
prop to Links that cannot be auto-fixed.
For example:
<
Link
href
=
"/about"
>
<
a
>About</
a
>
</
Link
>
// transforms into
<
Link
href
=
"/about"
>
About
</
Link
>
<
Link
href
=
"/about"
>
<
a
onClick
=
{()
=>
console
.log
(
'clicked'
)}>About</
a
>
</
Link
>
// transforms into
<
Link
href
=
"/about"
onClick
=
{()
=>
console
.log
(
'clicked'
)}>
About
</
Link
>
In cases where auto-fixing can't be applied, the
legacyBehavior
prop is added. This allows your app to keep functioning using the old behavior for that particular link.
const
Component
=
()
=>
<
a
>About</
a
>
<
Link
href
=
"/about"
>
<
Component
/>
</
Link
>
// becomes
<
Link
href
=
"/about"
legacyBehavior
>
<
Component
/>
</
Link
>
11
Migrate from CRA
cra-to-next
Terminal
npx
@next/codemod
cra-to-next
Migrates a Create React App project to Next.js; creating a Pages Router and necessary config to match behavior. Client-side only rendering is leveraged initially to prevent breaking compatibility due to
window
usage during SSR and can be enabled seamlessly to allow the gradual adoption of Next.js specific features.
Please share any feedback related to this transform
in this discussion
.
10
Add React imports
add-missing-react-import
Terminal
npx
@next/codemod
add-missing-react-import
Transforms files that do not import
React
to include the import in order for the new
React JSX transform
to work.
For example:
my-component.js
export
default
class
Home
extends
React
.
Component
{
render
() {
return
<
div
>Hello World</
div
>
}
}
Transforms into:
my-component.js
import
React
from
'react'
export
default
class
Home
extends
React
.
Component
{
render
() {
return
<
div
>Hello World</
div
>
}
}
9
Transform Anonymous Components into Named Components
name-default-component
Terminal
npx
@next/codemod
name-default-component
Versions 9 and above.
Transforms anonymous components into named components to make sure they work with
Fast Refresh
.
For example:
my-component.js
export
default
function
() {
return
<
div
>Hello World</
div
>
}
Transforms into:
my-component.js
export
default
function
MyComponent
() {
return
<
div
>Hello World</
div
>
}
The component will have a camel-cased name based on the name of the file, and it also works with arrow functions.
8
Transform AMP HOC into page config
withamp-to-config
Terminal
npx
@next/codemod
withamp-to-config
Transforms the
withAmp
HOC into Next.js 9 page configuration.
For example:
// Before
import
{ withAmp }
from
'next/amp'
function
Home
() {
return
<
h1
>My AMP Page</
h1
>
}
export
default
withAmp
(Home)
// After
export
default
function
Home
() {
return
<
h1
>My AMP Page</
h1
>
}
export
const
config
=
{
amp
:
true
,
}
6
Use
withRouter
url-to-withrouter
Terminal
npx
@next/codemod
url-to-withrouter
Transforms the deprecated automatically injected
url
property on top level pages to using
withRouter
and the
router
property it injects. Read more here:
https://nextjs.org/docs/messages/url-deprecated
For example:
From
import
React
from
'react'
export
default
class
extends
React
.
Component
{
render
() {
const
{
pathname
}
=
this
.
props
.url
return
<
div
>Current pathname: {pathname}</
div
>
}
}
To
import
React
from
'react'
import
{ withRouter }
from
'next/router'
export
default
withRouter
(
class
extends
React
.
Component
{
render
() {
const
{
pathname
}
=
this
.
props
.router
return
<
div
>Current pathname: {pathname}</
div
>
}
}
)
This is one case. All the cases that are transformed (and tested) can be found in the
__testfixtures__
directory
.
Previous
Upgrading
Next
From Pages to App
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.