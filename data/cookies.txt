Functions: cookies | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using App Router
Features available in /app
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
cookies().get(name)
cookies().getAll()
cookies().has(name)
cookies().set(name, value, options)
Deleting cookies
cookies().delete(name)
cookies().set(name, '')
cookies().set(name, value, { maxAge: 0 })
cookies().set(name, value, { expires: timestamp })
Version History
Next Steps
Edit this page on GitHub
Scroll to top
App Router
...
Functions
cookies
cookies
The
cookies
function allows you to read the HTTP incoming request cookies from a
Server Component
or write outgoing request cookies in a
Server Action
or
Route Handler
.
Good to know
:
cookies()
is a
Dynamic Function
whose returned values cannot be known ahead of time. Using it in a layout or page will opt a route into
dynamic rendering
at request time.
cookies().get(name)
A method that takes a cookie name and returns an object with name and value. If a cookie with
name
isn't found, it returns
undefined
. If multiple cookies match, it will only return the first match.
app/page.js
import
{ cookies }
from
'next/headers'
export
default
function
Page
() {
const
cookieStore
=
cookies
()
const
theme
=
cookieStore
.get
(
'theme'
)
return
'...'
}
cookies().getAll()
A method that is similar to
get
, but returns a list of all the cookies with a matching
name
. If
name
is unspecified, it returns all the available cookies.
app/page.js
import
{ cookies }
from
'next/headers'
export
default
function
Page
() {
const
cookieStore
=
cookies
()
return
cookieStore
.getAll
()
.map
((cookie)
=>
(
<
div
key
=
{
cookie
.name}>
<
p
>Name: {
cookie
.name}</
p
>
<
p
>Value: {
cookie
.value}</
p
>
</
div
>
))
}
cookies().has(name)
A method that takes a cookie name and returns a
boolean
based on if the cookie exists (
true
) or not (
false
).
app/page.js
import
{ cookies }
from
'next/headers'
export
default
function
Page
() {
const
cookiesList
=
cookies
()
const
hasCookie
=
cookiesList
.has
(
'theme'
)
return
'...'
}
cookies().set(name, value, options)
A method that takes a cookie name, value, and options and sets the outgoing request cookie.
Good to know
: HTTP does not allow setting cookies after streaming starts, so you must use
.set()
in a
Server Action
or
Route Handler
.
app/actions.js
'use server'
import
{ cookies }
from
'next/headers'
async
function
create
(data) {
cookies
()
.set
(
'name'
,
'lee'
)
// or
cookies
()
.set
(
'name'
,
'lee'
,
{ secure
:
true
})
// or
cookies
()
.set
({
name
:
'name'
,
value
:
'lee'
,
httpOnly
:
true
,
path
:
'/'
,
})
}
Deleting cookies
Good to know
: You can only delete cookies in a
Server Action
or
Route Handler
.
There are several options for deleting a cookie:
cookies().delete(name)
You can explicitly delete a cookie with a given name.
app/actions.js
'use server'
import
{ cookies }
from
'next/headers'
async
function
create
(data) {
cookies
()
.delete
(
'name'
)
}
cookies().set(name, '')
Alternatively, you can set a new cookie with the same name and an empty value.
app/actions.js
'use server'
import
{ cookies }
from
'next/headers'
async
function
create
(data) {
cookies
()
.set
(
'name'
,
''
)
}
Good to know
:
.set()
is only available in a
Server Action
or
Route Handler
.
cookies().set(name, value, { maxAge: 0 })
Setting
maxAge
to 0 will immediately expire a cookie.
app/actions.js
'use server'
import
{ cookies }
from
'next/headers'
async
function
create
(data) {
cookies
()
.set
(
'name'
,
'value'
,
{ maxAge
:
0
})
}
cookies().set(name, value, { expires: timestamp })
Setting
expires
to any value in the past will immediately expire a cookie.
app/actions.js
'use server'
import
{ cookies }
from
'next/headers'
async
function
create
(data) {
const
oneDay
=
24
*
60
*
60
*
1000
cookies
()
.set
(
'name'
,
'value'
,
{ expires
:
Date
.now
()
-
oneDay })
}
Good to know
: You can only delete cookies that belong to the same domain from which
.set()
is called. Additionally, the code must be executed on the same protocol (HTTP or HTTPS) as the cookie you want to delete.
Version History
Version
Changes
v13.0.0
cookies
introduced.
Next Steps
For more information on what to do next, we recommend the following sections
App Router
...
Data Fetching
Server Actions and Mutations
Learn how to handle form submissions and data mutations with Next.js.
Previous
Functions
Next
draftMode
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.