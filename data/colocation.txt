Routing: Project Organization | Next.js
Skip to content
Search documentation...
Search...
⌘K
Showcase
Docs
Blog
Analytics
Templates
Enterprise
Search documentation...
Search...
⌘K
Feedback
Learn
Menu
Using App Router
Features available in /app
Getting Started
Installation
Project Structure
Building Your Application
Routing
Defining Routes
Pages and Layouts
Linking and Navigating
Route Groups
Dynamic Routes
Loading UI and Streaming
Error Handling
Parallel Routes
Intercepting Routes
Route Handlers
Middleware
Project Organization
Internationalization
Data Fetching
Fetching, Caching, and Revalidating
Server Actions and Mutations
Data Fetching Patterns and Best Practices
Rendering
Server Components
Client Components
Composition Patterns
Edge and Node.js Runtimes
Caching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Metadata
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
MDX
src Directory
Draft Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Static Exports
Upgrading
Codemods
App Router Migration
Version 14
Migrating from Vite
API Reference
Components
Font
<Image>
<Link>
<Script>
File Conventions
default.js
error.js
layout.js
loading.js
not-found.js
page.js
route.js
Route Segment Config
template.js
Metadata Files
favicon, icon, and apple-icon
manifest.json
opengraph-image and twitter-image
robots.txt
sitemap.xml
Functions
cookies
draftMode
fetch
generateImageMetadata
generateMetadata
generateSitemaps
generateStaticParams
generateViewport
headers
ImageResponse
NextRequest
NextResponse
notFound
permanentRedirect
redirect
revalidatePath
revalidateTag
unstable_cache
unstable_noStore
useParams
usePathname
useReportWebVitals
useRouter
useSearchParams
useSelectedLayoutSegment
useSelectedLayoutSegments
userAgent
next.config.js Options
appDir
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
incrementalCacheHandlerPath
logging
mdxRs
onDemandEntries
optimizePackageImports
output
pageExtensions
Partial Prerendering (experimental)
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
serverActions
serverComponentsExternalPackages
trailingSlash
transpilePackages
turbo
typedRoutes
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Edge Runtime
Next.js CLI
Building Your Application
Routing
Pages and Layouts
Dynamic Routes
Linking and Navigating
Custom App
Custom Document
Custom Errors
API Routes
Internationalization
Authenticating
Middleware
Rendering
Server-side Rendering (SSR)
Static Site Generation (SSG)
Automatic Static Optimization
Client-side Rendering (CSR)
Edge and Node.js Runtimes
Data Fetching
getStaticProps
getStaticPaths
Forms and Mutations
getServerSideProps
Incremental Static Regeneration
Client-side Fetching
Styling
CSS Modules
Tailwind CSS
CSS-in-JS
Sass
Optimizing
Images
Fonts
Scripts
Static Assets
Lazy Loading
Analytics
OpenTelemetry
Instrumentation
Third Party Libraries
Configuring
TypeScript
ESLint
Environment Variables
Absolute Imports and Module Path Aliases
src Directory
MDX
AMP
Babel
PostCSS
Custom Server
Draft Mode
Error Handling
Debugging
Preview Mode
Content Security Policy
Testing
Vitest
Jest
Playwright
Cypress
Deploying
Going to Production
Static Exports
Multi Zones
Continuous Integration (CI) Build Caching
Upgrading
Codemods
From Pages to App
Version 14
Version 13
Version 12
Version 11
Version 10
Version 9
API Reference
Components
Font
<Head>
<Image>
<Image> (Legacy)
<Link>
<Script>
Functions
getInitialProps
getServerSideProps
getStaticPaths
getStaticProps
NextRequest
NextResponse
useAmp
useReportWebVitals
useRouter
userAgent
next.config.js Options
assetPrefix
basePath
compress
devIndicators
distDir
env
eslint
exportPathMap
generateBuildId
generateEtags
headers
httpAgentOptions
images
onDemandEntries
output
pageExtensions
poweredByHeader
productionBrowserSourceMaps
reactStrictMode
redirects
rewrites
Runtime Config
trailingSlash
transpilePackages
turbo
typescript
urlImports
webpack
webVitalsAttribution
create-next-app
Next.js CLI
Edge Runtime
Architecture
Accessibility
Fast Refresh
Next.js Compiler
Supported Browsers
Turbopack
Community
Contribution Guide
On this page
Safe colocation by default
Project organization features
Private Folders
Route Groups
src Directory
Module Path Aliases
Project organization strategies
Store project files outside of app
Store project files in top-level folders inside of app
Split project files by feature or route
Next Steps
Edit this page on GitHub
Scroll to top
App Router
...
Routing
Project Organization
Project Organization and File Colocation
Apart from
routing folder and file conventions
, Next.js is
unopinionated
about how you organize and colocate your project files.
This page shares default behavior and features you can use to organize your project.
Safe colocation by default
Project organization features
Project organization strategies
Safe colocation by default
In the
app
directory,
nested folder hierarchy
defines route structure.
Each folder represents a route segment that is mapped to a corresponding segment in a URL path.
However, even though route structure is defined through folders, a route is
not publicly accessible
until a
page.js
or
route.js
file is added to a route segment.
And, even when a route is made publicly accessible, only the
content returned
by
page.js
or
route.js
is sent to the client.
This means that
project files
can be
safely colocated
inside route segments in the
app
directory without accidentally being routable.
Good to know
:
This is different from the
pages
directory, where any file in
pages
is considered a route.
While you
can
colocate your project files in
app
you don't
have
to. If you prefer, you can
keep them outside the
app
directory
.
Project organization features
Next.js provides several features to help you organize your project.
Private Folders
Private folders can be created by prefixing a folder with an underscore:
_folderName
This indicates the folder is a private implementation detail and should not be considered by the routing system, thereby
opting the folder and all its subfolders
out of routing.
Since files in the
app
directory can be
safely colocated by default
, private folders are not required for colocation. However, they can be useful for:
Separating UI logic from routing logic.
Consistently organizing internal files across a project and the Next.js ecosystem.
Sorting and grouping files in code editors.
Avoiding potential naming conflicts with future Next.js file conventions.
Good to know
While not a framework convention, you might also consider marking files outside private folders as "private" using the same underscore pattern.
You can create URL segments that start with an underscore by prefixing the folder name with
%5F
(the URL-encoded form of an underscore):
%5FfolderName
.
If you don't use private folders, it would be helpful to know Next.js
special file conventions
to prevent unexpected naming conflicts.
Route Groups
Route groups can be created by wrapping a folder in parenthesis:
(folderName)
This indicates the folder is for organizational purposes and should
not be included
in the route's URL path.
Route groups are useful for:
Organizing routes into groups
e.g. by site section, intent, or team.
Enabling nested layouts in the same route segment level:
Creating multiple nested layouts in the same segment, including multiple root layouts
Adding a layout to a subset of routes in a common segment
src
Directory
Next.js supports storing application code (including
app
) inside an optional
src
directory
. This separates application code from project configuration files which mostly live in the root of a project.
Module Path Aliases
Next.js supports
Module Path Aliases
which make it easier to read and maintain imports across deeply nested project files.
app/dashboard/settings/analytics/page.js
// before
import
{ Button }
from
'../../../components/button'
// after
import
{ Button }
from
'@/components/button'
Project organization strategies
There is no "right" or "wrong" way when it comes to organizing your own files and folders in a Next.js project.
The following section lists a very high-level overview of common strategies. The simplest takeaway is to choose a strategy that works for you and your team and be consistent across the project.
Good to know
: In our examples below, we're using
components
and
lib
folders as generalized placeholders, their naming has no special framework significance and your projects might use other folders like
ui
,
utils
,
hooks
,
styles
, etc.
Store project files outside of
app
This strategy stores all application code in shared folders in the
root of your project
and keeps the
app
directory purely for routing purposes.
Store project files in top-level folders inside of
app
This strategy stores all application code in shared folders in the
root of the
app
directory
.
Split project files by feature or route
This strategy stores globally shared application code in the root
app
directory and
splits
more specific application code into the route segments that use them.
Next Steps
App Router
...
Routing
Defining Routes
Learn how to create your first route in Next.js.
App Router
...
Routing
Route Groups
Route Groups can be used to partition your Next.js application into different sections.
App Router
...
Configuring
src Directory
Save pages under the `src` directory as an alternative to the root `pages` directory.
App Router
...
Configuring
Absolute Imports and Module Path Aliases
Configure module path aliases that allow you to remap certain import paths.
Previous
Middleware
Next
Internationalization
Was this helpful?
supported.
Send
Resources
Docs
Learn
Showcase
Blog
Analytics
Next.js Conf
Previews
More
Commerce
Contact Sales
GitHub
Releases
Telemetry
About
Vercel
Next.js + Vercel
Open Source Software
GitHub
Twitter
Legal
Privacy Policy
Cookie Preferences
Subscribe to our newsletter
Stay updated on new releases and features, guides, and case studies.
Subscribe
©
2023
Vercel
, Inc.